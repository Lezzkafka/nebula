// Code generated by protoc-gen-go. DO NOT EDIT.
// source: provider.proto

/*
Package provider_pb is a generated protocol buffer package.

It is generated from these files:
	provider.proto

It has these top-level messages:
	PingReq
	PingResp
	StoreReq
	StoreResp
	RetrieveReq
	RetrieveResp
	RemoveReq
	RemoveResp
	GetFragmentReq
	GetFragmentResp
*/
package provider_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingReq struct {
	Version uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *PingReq) Reset()                    { *m = PingReq{} }
func (m *PingReq) String() string            { return proto.CompactTextString(m) }
func (*PingReq) ProtoMessage()               {}
func (*PingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type PingResp struct {
}

func (m *PingResp) Reset()                    { *m = PingResp{} }
func (m *PingResp) String() string            { return proto.CompactTextString(m) }
func (*PingResp) ProtoMessage()               {}
func (*PingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StoreReq struct {
	Data      []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Version   uint32 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	Auth      []byte `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
	Timestamp uint64 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Ticket    string `protobuf:"bytes,5,opt,name=ticket" json:"ticket,omitempty"`
	Key       []byte `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	FileSize  uint64 `protobuf:"varint,7,opt,name=fileSize" json:"fileSize,omitempty"`
}

func (m *StoreReq) Reset()                    { *m = StoreReq{} }
func (m *StoreReq) String() string            { return proto.CompactTextString(m) }
func (*StoreReq) ProtoMessage()               {}
func (*StoreReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StoreReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *StoreReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *StoreReq) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *StoreReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *StoreReq) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *StoreReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *StoreReq) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

type StoreResp struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *StoreResp) Reset()                    { *m = StoreResp{} }
func (m *StoreResp) String() string            { return proto.CompactTextString(m) }
func (*StoreResp) ProtoMessage()               {}
func (*StoreResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StoreResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RetrieveReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Auth      []byte `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Ticket    string `protobuf:"bytes,4,opt,name=ticket" json:"ticket,omitempty"`
	Key       []byte `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	FileSize  uint64 `protobuf:"varint,6,opt,name=fileSize" json:"fileSize,omitempty"`
}

func (m *RetrieveReq) Reset()                    { *m = RetrieveReq{} }
func (m *RetrieveReq) String() string            { return proto.CompactTextString(m) }
func (*RetrieveReq) ProtoMessage()               {}
func (*RetrieveReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RetrieveReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RetrieveReq) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *RetrieveReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RetrieveReq) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *RetrieveReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RetrieveReq) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

type RetrieveResp struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RetrieveResp) Reset()                    { *m = RetrieveResp{} }
func (m *RetrieveResp) String() string            { return proto.CompactTextString(m) }
func (*RetrieveResp) ProtoMessage()               {}
func (*RetrieveResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RetrieveResp) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RemoveReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Auth      []byte `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Key       []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	FileSize  uint64 `protobuf:"varint,5,opt,name=fileSize" json:"fileSize,omitempty"`
}

func (m *RemoveReq) Reset()                    { *m = RemoveReq{} }
func (m *RemoveReq) String() string            { return proto.CompactTextString(m) }
func (*RemoveReq) ProtoMessage()               {}
func (*RemoveReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RemoveReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RemoveReq) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *RemoveReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RemoveReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *RemoveReq) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

type RemoveResp struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *RemoveResp) Reset()                    { *m = RemoveResp{} }
func (m *RemoveResp) String() string            { return proto.CompactTextString(m) }
func (*RemoveResp) ProtoMessage()               {}
func (*RemoveResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RemoveResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type GetFragmentReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Auth      []byte `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Key       []byte `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Size      uint32 `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	Positions []byte `protobuf:"bytes,6,opt,name=positions,proto3" json:"positions,omitempty"`
}

func (m *GetFragmentReq) Reset()                    { *m = GetFragmentReq{} }
func (m *GetFragmentReq) String() string            { return proto.CompactTextString(m) }
func (*GetFragmentReq) ProtoMessage()               {}
func (*GetFragmentReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetFragmentReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetFragmentReq) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *GetFragmentReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GetFragmentReq) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *GetFragmentReq) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *GetFragmentReq) GetPositions() []byte {
	if m != nil {
		return m.Positions
	}
	return nil
}

type GetFragmentResp struct {
	Data [][]byte `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *GetFragmentResp) Reset()                    { *m = GetFragmentResp{} }
func (m *GetFragmentResp) String() string            { return proto.CompactTextString(m) }
func (*GetFragmentResp) ProtoMessage()               {}
func (*GetFragmentResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetFragmentResp) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PingReq)(nil), "provider.pb.PingReq")
	proto.RegisterType((*PingResp)(nil), "provider.pb.PingResp")
	proto.RegisterType((*StoreReq)(nil), "provider.pb.StoreReq")
	proto.RegisterType((*StoreResp)(nil), "provider.pb.StoreResp")
	proto.RegisterType((*RetrieveReq)(nil), "provider.pb.RetrieveReq")
	proto.RegisterType((*RetrieveResp)(nil), "provider.pb.RetrieveResp")
	proto.RegisterType((*RemoveReq)(nil), "provider.pb.RemoveReq")
	proto.RegisterType((*RemoveResp)(nil), "provider.pb.RemoveResp")
	proto.RegisterType((*GetFragmentReq)(nil), "provider.pb.GetFragmentReq")
	proto.RegisterType((*GetFragmentResp)(nil), "provider.pb.GetFragmentResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProviderService service

type ProviderServiceClient interface {
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error)
	Store(ctx context.Context, opts ...grpc.CallOption) (ProviderService_StoreClient, error)
	Retrieve(ctx context.Context, in *RetrieveReq, opts ...grpc.CallOption) (ProviderService_RetrieveClient, error)
	Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*RemoveResp, error)
	GetFragment(ctx context.Context, in *GetFragmentReq, opts ...grpc.CallOption) (*GetFragmentResp, error)
}

type providerServiceClient struct {
	cc *grpc.ClientConn
}

func NewProviderServiceClient(cc *grpc.ClientConn) ProviderServiceClient {
	return &providerServiceClient{cc}
}

func (c *providerServiceClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := grpc.Invoke(ctx, "/provider.pb.ProviderService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) Store(ctx context.Context, opts ...grpc.CallOption) (ProviderService_StoreClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ProviderService_serviceDesc.Streams[0], c.cc, "/provider.pb.ProviderService/Store", opts...)
	if err != nil {
		return nil, err
	}
	x := &providerServiceStoreClient{stream}
	return x, nil
}

type ProviderService_StoreClient interface {
	Send(*StoreReq) error
	CloseAndRecv() (*StoreResp, error)
	grpc.ClientStream
}

type providerServiceStoreClient struct {
	grpc.ClientStream
}

func (x *providerServiceStoreClient) Send(m *StoreReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *providerServiceStoreClient) CloseAndRecv() (*StoreResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StoreResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *providerServiceClient) Retrieve(ctx context.Context, in *RetrieveReq, opts ...grpc.CallOption) (ProviderService_RetrieveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ProviderService_serviceDesc.Streams[1], c.cc, "/provider.pb.ProviderService/Retrieve", opts...)
	if err != nil {
		return nil, err
	}
	x := &providerServiceRetrieveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProviderService_RetrieveClient interface {
	Recv() (*RetrieveResp, error)
	grpc.ClientStream
}

type providerServiceRetrieveClient struct {
	grpc.ClientStream
}

func (x *providerServiceRetrieveClient) Recv() (*RetrieveResp, error) {
	m := new(RetrieveResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *providerServiceClient) Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*RemoveResp, error) {
	out := new(RemoveResp)
	err := grpc.Invoke(ctx, "/provider.pb.ProviderService/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) GetFragment(ctx context.Context, in *GetFragmentReq, opts ...grpc.CallOption) (*GetFragmentResp, error) {
	out := new(GetFragmentResp)
	err := grpc.Invoke(ctx, "/provider.pb.ProviderService/GetFragment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProviderService service

type ProviderServiceServer interface {
	Ping(context.Context, *PingReq) (*PingResp, error)
	Store(ProviderService_StoreServer) error
	Retrieve(*RetrieveReq, ProviderService_RetrieveServer) error
	Remove(context.Context, *RemoveReq) (*RemoveResp, error)
	GetFragment(context.Context, *GetFragmentReq) (*GetFragmentResp, error)
}

func RegisterProviderServiceServer(s *grpc.Server, srv ProviderServiceServer) {
	s.RegisterService(&_ProviderService_serviceDesc, srv)
}

func _ProviderService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.pb.ProviderService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProviderServiceServer).Store(&providerServiceStoreServer{stream})
}

type ProviderService_StoreServer interface {
	SendAndClose(*StoreResp) error
	Recv() (*StoreReq, error)
	grpc.ServerStream
}

type providerServiceStoreServer struct {
	grpc.ServerStream
}

func (x *providerServiceStoreServer) SendAndClose(m *StoreResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *providerServiceStoreServer) Recv() (*StoreReq, error) {
	m := new(StoreReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProviderService_Retrieve_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RetrieveReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProviderServiceServer).Retrieve(m, &providerServiceRetrieveServer{stream})
}

type ProviderService_RetrieveServer interface {
	Send(*RetrieveResp) error
	grpc.ServerStream
}

type providerServiceRetrieveServer struct {
	grpc.ServerStream
}

func (x *providerServiceRetrieveServer) Send(m *RetrieveResp) error {
	return x.ServerStream.SendMsg(m)
}

func _ProviderService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.pb.ProviderService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).Remove(ctx, req.(*RemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_GetFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFragmentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).GetFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/provider.pb.ProviderService/GetFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).GetFragment(ctx, req.(*GetFragmentReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProviderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "provider.pb.ProviderService",
	HandlerType: (*ProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ProviderService_Ping_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _ProviderService_Remove_Handler,
		},
		{
			MethodName: "GetFragment",
			Handler:    _ProviderService_GetFragment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _ProviderService_Store_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Retrieve",
			Handler:       _ProviderService_Retrieve_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "provider.proto",
}

func init() { proto.RegisterFile("provider.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 445 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xc9, 0x66, 0xb3, 0x99, 0xf4, 0x07, 0x8d, 0x20, 0x98, 0xa5, 0x87, 0xc8, 0xa8, 0x28,
	0xa7, 0x08, 0x81, 0xb8, 0xc0, 0x11, 0x09, 0x24, 0x4e, 0x95, 0xf3, 0x04, 0xdb, 0x74, 0x28, 0x56,
	0x49, 0x6c, 0x6c, 0x37, 0x12, 0xdc, 0x79, 0x0e, 0x78, 0x04, 0x9e, 0x85, 0x27, 0x42, 0x76, 0x76,
	0x9b, 0xdd, 0x68, 0x37, 0x27, 0x7a, 0x9b, 0x19, 0x7f, 0xfe, 0xf4, 0x7d, 0xe3, 0x19, 0xc3, 0x89,
	0xb1, 0x7a, 0xa3, 0xae, 0xc8, 0xce, 0x8d, 0xd5, 0x5e, 0xe3, 0x78, 0x97, 0x5f, 0x8a, 0xe7, 0x30,
	0xbc, 0x50, 0xeb, 0x6b, 0x49, 0xdf, 0x90, 0xc3, 0x70, 0x43, 0xd6, 0x29, 0xbd, 0xe6, 0x6c, 0xca,
	0x66, 0xc7, 0xb2, 0x4a, 0x05, 0x40, 0xb6, 0x05, 0x39, 0x23, 0xfe, 0x30, 0xc8, 0x16, 0x5e, 0x5b,
	0x0a, 0x57, 0x10, 0x92, 0xab, 0xc2, 0x17, 0x11, 0x7f, 0x24, 0x63, 0x5c, 0xa7, 0xe9, 0x35, 0x68,
	0x02, 0xba, 0xb8, 0xf5, 0x5f, 0x78, 0x7f, 0x8b, 0x0e, 0x31, 0x9e, 0xc1, 0xc8, 0xab, 0x15, 0x39,
	0x5f, 0xac, 0x0c, 0x4f, 0xa6, 0x6c, 0x96, 0xc8, 0x5d, 0x01, 0x27, 0x90, 0x7a, 0xb5, 0xbc, 0x21,
	0xcf, 0x07, 0x53, 0x36, 0x1b, 0xc9, 0x32, 0xc3, 0x87, 0xd0, 0xbf, 0xa1, 0xef, 0x3c, 0x8d, 0x44,
	0x21, 0xc4, 0x1c, 0xb2, 0xcf, 0xea, 0x2b, 0x2d, 0xd4, 0x0f, 0xe2, 0xc3, 0x48, 0x73, 0x97, 0x8b,
	0x73, 0x18, 0x95, 0x8a, 0x9d, 0x09, 0xf2, 0xdc, 0xed, 0x72, 0x49, 0xce, 0x45, 0xd5, 0x99, 0xac,
	0x52, 0xf1, 0x8b, 0xc1, 0x58, 0x92, 0xb7, 0x8a, 0x36, 0x74, 0xb0, 0x1f, 0x77, 0x46, 0x7a, 0x5d,
	0x46, 0xfa, 0xdd, 0x46, 0x92, 0x36, 0x23, 0x83, 0x76, 0x23, 0xe9, 0x9e, 0x11, 0x01, 0x47, 0x3b,
	0x81, 0xce, 0xb4, 0xb5, 0x5f, 0xfc, 0x64, 0x30, 0x92, 0xb4, 0xd2, 0xff, 0xdf, 0x43, 0xa9, 0x35,
	0x69, 0xd7, 0x3a, 0xd8, 0xd3, 0xfa, 0x02, 0xa0, 0x92, 0x71, 0xb0, 0xeb, 0xbf, 0x19, 0x9c, 0x7c,
	0x24, 0xff, 0xc1, 0x16, 0xd7, 0x2b, 0x5a, 0xfb, 0xfb, 0x17, 0x8d, 0x90, 0xb8, 0x4a, 0xf0, 0xb1,
	0x8c, 0x71, 0xe0, 0x30, 0xda, 0x29, 0xaf, 0xf4, 0xda, 0x95, 0x53, 0xb5, 0x2b, 0x88, 0x73, 0x38,
	0x6d, 0x28, 0x6c, 0x74, 0xbe, 0x5f, 0x75, 0xfe, 0xd5, 0xdf, 0x1e, 0x9c, 0x5e, 0x94, 0xab, 0xb5,
	0x20, 0xbb, 0x51, 0x4b, 0xc2, 0x37, 0x90, 0x84, 0xcd, 0xc1, 0x47, 0xf3, 0xda, 0xd2, 0xcd, 0xcb,
	0x8d, 0xcb, 0x1f, 0xb7, 0x54, 0x9d, 0x11, 0x0f, 0xf0, 0x2d, 0x0c, 0xe2, 0xc4, 0x62, 0x13, 0x51,
	0xed, 0x5d, 0x3e, 0x69, 0x2b, 0x87, 0x9b, 0x33, 0x86, 0xef, 0x21, 0xab, 0x86, 0x04, 0x79, 0x03,
	0x57, 0x1b, 0xee, 0xfc, 0x69, 0xc7, 0x49, 0x20, 0x79, 0xc9, 0xf0, 0x1d, 0xa4, 0xdb, 0xd7, 0xc3,
	0xc9, 0x1e, 0xb0, 0x9c, 0xac, 0xfc, 0x49, 0x6b, 0x3d, 0xaa, 0xff, 0x04, 0xe3, 0x5a, 0xbf, 0xf0,
	0x59, 0x03, 0xd9, 0x7c, 0xeb, 0xfc, 0xac, 0xfb, 0x30, 0x70, 0x5d, 0xa6, 0xf1, 0xcf, 0x7a, 0xfd,
	0x2f, 0x00, 0x00, 0xff, 0xff, 0x93, 0xa1, 0x44, 0x35, 0xc5, 0x04, 0x00, 0x00,
}
