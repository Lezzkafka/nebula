// Code generated by protoc-gen-go. DO NOT EDIT.
// source: provider_register.proto

/*
Package register_provider_pb is a generated protocol buffer package.

It is generated from these files:
	provider_register.proto

It has these top-level messages:
	GetPublicKeyReq
	PublicKeyResp
	RegisterReq
	RegisterResp
	VerifyBillEmailReq
	VerifyBillEmailResp
	GetTrackerServerReq
	GetTrackerServerResp
	TrackerServer
*/
package register_provider_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetPublicKeyReq struct {
	Version uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *GetPublicKeyReq) Reset()                    { *m = GetPublicKeyReq{} }
func (m *GetPublicKeyReq) String() string            { return proto.CompactTextString(m) }
func (*GetPublicKeyReq) ProtoMessage()               {}
func (*GetPublicKeyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetPublicKeyReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type PublicKeyResp struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
}

func (m *PublicKeyResp) Reset()                    { *m = PublicKeyResp{} }
func (m *PublicKeyResp) String() string            { return proto.CompactTextString(m) }
func (*PublicKeyResp) ProtoMessage()               {}
func (*PublicKeyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PublicKeyResp) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type RegisterReq struct {
	Version            uint32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Auth               []byte   `protobuf:"bytes,2,opt,name=auth,proto3" json:"auth,omitempty"`
	NodeIdEnc          []byte   `protobuf:"bytes,3,opt,name=nodeIdEnc,proto3" json:"nodeIdEnc,omitempty"`
	PublicKeyEnc       []byte   `protobuf:"bytes,4,opt,name=publicKeyEnc,proto3" json:"publicKeyEnc,omitempty"`
	EncryptKeyEnc      []byte   `protobuf:"bytes,5,opt,name=encryptKeyEnc,proto3" json:"encryptKeyEnc,omitempty"`
	WalletAddressEnc   []byte   `protobuf:"bytes,6,opt,name=walletAddressEnc,proto3" json:"walletAddressEnc,omitempty"`
	BillEmailEnc       []byte   `protobuf:"bytes,7,opt,name=billEmailEnc,proto3" json:"billEmailEnc,omitempty"`
	MainStorageVolume  uint64   `protobuf:"varint,8,opt,name=mainStorageVolume" json:"mainStorageVolume,omitempty"`
	UpBandwidth        uint64   `protobuf:"varint,9,opt,name=upBandwidth" json:"upBandwidth,omitempty"`
	DownBandwidth      uint64   `protobuf:"varint,10,opt,name=downBandwidth" json:"downBandwidth,omitempty"`
	TestUpBandwidth    uint64   `protobuf:"varint,11,opt,name=testUpBandwidth" json:"testUpBandwidth,omitempty"`
	TestDownBandwidth  uint64   `protobuf:"varint,12,opt,name=testDownBandwidth" json:"testDownBandwidth,omitempty"`
	Availability       float32  `protobuf:"fixed32,13,opt,name=availability" json:"availability,omitempty"`
	Port               uint32   `protobuf:"varint,14,opt,name=port" json:"port,omitempty"`
	IpEnc              []byte   `protobuf:"bytes,15,opt,name=ipEnc,proto3" json:"ipEnc,omitempty"`
	DynamicDomain      []byte   `protobuf:"bytes,16,opt,name=dynamicDomain,proto3" json:"dynamicDomain,omitempty"`
	ExtraStorageVolume []uint64 `protobuf:"varint,17,rep,packed,name=extraStorageVolume" json:"extraStorageVolume,omitempty"`
}

func (m *RegisterReq) Reset()                    { *m = RegisterReq{} }
func (m *RegisterReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()               {}
func (*RegisterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RegisterReq) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

func (m *RegisterReq) GetNodeIdEnc() []byte {
	if m != nil {
		return m.NodeIdEnc
	}
	return nil
}

func (m *RegisterReq) GetPublicKeyEnc() []byte {
	if m != nil {
		return m.PublicKeyEnc
	}
	return nil
}

func (m *RegisterReq) GetEncryptKeyEnc() []byte {
	if m != nil {
		return m.EncryptKeyEnc
	}
	return nil
}

func (m *RegisterReq) GetWalletAddressEnc() []byte {
	if m != nil {
		return m.WalletAddressEnc
	}
	return nil
}

func (m *RegisterReq) GetBillEmailEnc() []byte {
	if m != nil {
		return m.BillEmailEnc
	}
	return nil
}

func (m *RegisterReq) GetMainStorageVolume() uint64 {
	if m != nil {
		return m.MainStorageVolume
	}
	return 0
}

func (m *RegisterReq) GetUpBandwidth() uint64 {
	if m != nil {
		return m.UpBandwidth
	}
	return 0
}

func (m *RegisterReq) GetDownBandwidth() uint64 {
	if m != nil {
		return m.DownBandwidth
	}
	return 0
}

func (m *RegisterReq) GetTestUpBandwidth() uint64 {
	if m != nil {
		return m.TestUpBandwidth
	}
	return 0
}

func (m *RegisterReq) GetTestDownBandwidth() uint64 {
	if m != nil {
		return m.TestDownBandwidth
	}
	return 0
}

func (m *RegisterReq) GetAvailability() float32 {
	if m != nil {
		return m.Availability
	}
	return 0
}

func (m *RegisterReq) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *RegisterReq) GetIpEnc() []byte {
	if m != nil {
		return m.IpEnc
	}
	return nil
}

func (m *RegisterReq) GetDynamicDomain() []byte {
	if m != nil {
		return m.DynamicDomain
	}
	return nil
}

func (m *RegisterReq) GetExtraStorageVolume() []uint64 {
	if m != nil {
		return m.ExtraStorageVolume
	}
	return nil
}

type RegisterResp struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *RegisterResp) Reset()                    { *m = RegisterResp{} }
func (m *RegisterResp) String() string            { return proto.CompactTextString(m) }
func (*RegisterResp) ProtoMessage()               {}
func (*RegisterResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RegisterResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RegisterResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type VerifyBillEmailReq struct {
	Version    uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId     []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	VerifyCode string `protobuf:"bytes,3,opt,name=verifyCode" json:"verifyCode,omitempty"`
	Sign       []byte `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *VerifyBillEmailReq) Reset()                    { *m = VerifyBillEmailReq{} }
func (m *VerifyBillEmailReq) String() string            { return proto.CompactTextString(m) }
func (*VerifyBillEmailReq) ProtoMessage()               {}
func (*VerifyBillEmailReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VerifyBillEmailReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VerifyBillEmailReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *VerifyBillEmailReq) GetVerifyCode() string {
	if m != nil {
		return m.VerifyCode
	}
	return ""
}

func (m *VerifyBillEmailReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type VerifyBillEmailResp struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *VerifyBillEmailResp) Reset()                    { *m = VerifyBillEmailResp{} }
func (m *VerifyBillEmailResp) String() string            { return proto.CompactTextString(m) }
func (*VerifyBillEmailResp) ProtoMessage()               {}
func (*VerifyBillEmailResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *VerifyBillEmailResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *VerifyBillEmailResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type GetTrackerServerReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Sign      []byte `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *GetTrackerServerReq) Reset()                    { *m = GetTrackerServerReq{} }
func (m *GetTrackerServerReq) String() string            { return proto.CompactTextString(m) }
func (*GetTrackerServerReq) ProtoMessage()               {}
func (*GetTrackerServerReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetTrackerServerReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetTrackerServerReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *GetTrackerServerReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GetTrackerServerReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type GetTrackerServerResp struct {
	Server []*TrackerServer `protobuf:"bytes,1,rep,name=server" json:"server,omitempty"`
}

func (m *GetTrackerServerResp) Reset()                    { *m = GetTrackerServerResp{} }
func (m *GetTrackerServerResp) String() string            { return proto.CompactTextString(m) }
func (*GetTrackerServerResp) ProtoMessage()               {}
func (*GetTrackerServerResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetTrackerServerResp) GetServer() []*TrackerServer {
	if m != nil {
		return m.Server
	}
	return nil
}

type TrackerServer struct {
	Server string `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	Port   uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *TrackerServer) Reset()                    { *m = TrackerServer{} }
func (m *TrackerServer) String() string            { return proto.CompactTextString(m) }
func (*TrackerServer) ProtoMessage()               {}
func (*TrackerServer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *TrackerServer) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *TrackerServer) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*GetPublicKeyReq)(nil), "register_provider_pb.GetPublicKeyReq")
	proto.RegisterType((*PublicKeyResp)(nil), "register_provider_pb.PublicKeyResp")
	proto.RegisterType((*RegisterReq)(nil), "register_provider_pb.RegisterReq")
	proto.RegisterType((*RegisterResp)(nil), "register_provider_pb.RegisterResp")
	proto.RegisterType((*VerifyBillEmailReq)(nil), "register_provider_pb.VerifyBillEmailReq")
	proto.RegisterType((*VerifyBillEmailResp)(nil), "register_provider_pb.VerifyBillEmailResp")
	proto.RegisterType((*GetTrackerServerReq)(nil), "register_provider_pb.GetTrackerServerReq")
	proto.RegisterType((*GetTrackerServerResp)(nil), "register_provider_pb.GetTrackerServerResp")
	proto.RegisterType((*TrackerServer)(nil), "register_provider_pb.TrackerServer")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProviderRegisterService service

type ProviderRegisterServiceClient interface {
	GetPublicKey(ctx context.Context, in *GetPublicKeyReq, opts ...grpc.CallOption) (*PublicKeyResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	VerifyBillEmail(ctx context.Context, in *VerifyBillEmailReq, opts ...grpc.CallOption) (*VerifyBillEmailResp, error)
	GetTrackerServer(ctx context.Context, in *GetTrackerServerReq, opts ...grpc.CallOption) (*GetTrackerServerResp, error)
}

type providerRegisterServiceClient struct {
	cc *grpc.ClientConn
}

func NewProviderRegisterServiceClient(cc *grpc.ClientConn) ProviderRegisterServiceClient {
	return &providerRegisterServiceClient{cc}
}

func (c *providerRegisterServiceClient) GetPublicKey(ctx context.Context, in *GetPublicKeyReq, opts ...grpc.CallOption) (*PublicKeyResp, error) {
	out := new(PublicKeyResp)
	err := grpc.Invoke(ctx, "/register_provider_pb.ProviderRegisterService/GetPublicKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerRegisterServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := grpc.Invoke(ctx, "/register_provider_pb.ProviderRegisterService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerRegisterServiceClient) VerifyBillEmail(ctx context.Context, in *VerifyBillEmailReq, opts ...grpc.CallOption) (*VerifyBillEmailResp, error) {
	out := new(VerifyBillEmailResp)
	err := grpc.Invoke(ctx, "/register_provider_pb.ProviderRegisterService/VerifyBillEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerRegisterServiceClient) GetTrackerServer(ctx context.Context, in *GetTrackerServerReq, opts ...grpc.CallOption) (*GetTrackerServerResp, error) {
	out := new(GetTrackerServerResp)
	err := grpc.Invoke(ctx, "/register_provider_pb.ProviderRegisterService/GetTrackerServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProviderRegisterService service

type ProviderRegisterServiceServer interface {
	GetPublicKey(context.Context, *GetPublicKeyReq) (*PublicKeyResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	VerifyBillEmail(context.Context, *VerifyBillEmailReq) (*VerifyBillEmailResp, error)
	GetTrackerServer(context.Context, *GetTrackerServerReq) (*GetTrackerServerResp, error)
}

func RegisterProviderRegisterServiceServer(s *grpc.Server, srv ProviderRegisterServiceServer) {
	s.RegisterService(&_ProviderRegisterService_serviceDesc, srv)
}

func _ProviderRegisterService_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderRegisterServiceServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register_provider_pb.ProviderRegisterService/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderRegisterServiceServer).GetPublicKey(ctx, req.(*GetPublicKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderRegisterService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderRegisterServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register_provider_pb.ProviderRegisterService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderRegisterServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderRegisterService_VerifyBillEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBillEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderRegisterServiceServer).VerifyBillEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register_provider_pb.ProviderRegisterService/VerifyBillEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderRegisterServiceServer).VerifyBillEmail(ctx, req.(*VerifyBillEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderRegisterService_GetTrackerServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrackerServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderRegisterServiceServer).GetTrackerServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register_provider_pb.ProviderRegisterService/GetTrackerServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderRegisterServiceServer).GetTrackerServer(ctx, req.(*GetTrackerServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProviderRegisterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "register_provider_pb.ProviderRegisterService",
	HandlerType: (*ProviderRegisterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicKey",
			Handler:    _ProviderRegisterService_GetPublicKey_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ProviderRegisterService_Register_Handler,
		},
		{
			MethodName: "VerifyBillEmail",
			Handler:    _ProviderRegisterService_VerifyBillEmail_Handler,
		},
		{
			MethodName: "GetTrackerServer",
			Handler:    _ProviderRegisterService_GetTrackerServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "provider_register.proto",
}

func init() { proto.RegisterFile("provider_register.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 642 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x51, 0x4f, 0xdb, 0x3c,
	0x14, 0xfd, 0x4a, 0x4b, 0xa1, 0xb7, 0xed, 0x57, 0xb8, 0x20, 0x88, 0x2a, 0x34, 0x75, 0xd9, 0x26,
	0x05, 0xb6, 0xf5, 0x81, 0xbd, 0x8d, 0x27, 0x18, 0x08, 0x4d, 0xd3, 0x24, 0x94, 0x6e, 0x3c, 0x4d,
	0x42, 0x6e, 0xe2, 0x15, 0x8b, 0x34, 0xc9, 0x6c, 0xb7, 0xac, 0xfb, 0x3b, 0xfb, 0x6d, 0xfb, 0x1f,
	0x93, 0x6f, 0xd2, 0x36, 0x69, 0x53, 0x60, 0x6f, 0xbe, 0xc7, 0xc7, 0xf7, 0x1c, 0xdb, 0x27, 0x0e,
	0xec, 0xc7, 0x32, 0x1a, 0x0b, 0x9f, 0xcb, 0x1b, 0xc9, 0x07, 0x42, 0x69, 0x2e, 0xbb, 0xb1, 0x8c,
	0x74, 0x84, 0xbb, 0xd3, 0xfa, 0x66, 0xc6, 0x88, 0xfb, 0xf6, 0x6b, 0x68, 0x5d, 0x72, 0x7d, 0x35,
	0xea, 0x07, 0xc2, 0xfb, 0xc4, 0x27, 0x2e, 0xff, 0x81, 0x16, 0x6c, 0x8c, 0xb9, 0x54, 0x22, 0x0a,
	0xad, 0x52, 0xa7, 0xe4, 0x34, 0xdd, 0x69, 0x69, 0xbf, 0x85, 0x66, 0x86, 0xa9, 0x62, 0x3c, 0x80,
	0x5a, 0x3c, 0x05, 0x88, 0xdc, 0x70, 0xe7, 0x80, 0xfd, 0xa7, 0x02, 0x75, 0x37, 0x15, 0x7d, 0xb0,
	0x31, 0x22, 0x54, 0xd8, 0x48, 0xdf, 0x5a, 0x6b, 0xd4, 0x82, 0xc6, 0xa6, 0x77, 0x18, 0xf9, 0xfc,
	0xa3, 0x7f, 0x11, 0x7a, 0x56, 0x39, 0xe9, 0x3d, 0x03, 0xd0, 0x86, 0xc6, 0x4c, 0xc8, 0x10, 0x2a,
	0x44, 0xc8, 0x61, 0xf8, 0x12, 0x9a, 0x3c, 0xf4, 0xe4, 0x24, 0xd6, 0x29, 0x69, 0x9d, 0x48, 0x79,
	0x10, 0x8f, 0x60, 0xeb, 0x9e, 0x05, 0x01, 0xd7, 0xa7, 0xbe, 0x2f, 0xb9, 0x52, 0x86, 0x58, 0x25,
	0xe2, 0x12, 0x6e, 0x54, 0xfb, 0x22, 0x08, 0x2e, 0x86, 0x4c, 0x04, 0x86, 0xb7, 0x91, 0xa8, 0x66,
	0x31, 0x7c, 0x03, 0xdb, 0x43, 0x26, 0xc2, 0x9e, 0x8e, 0x24, 0x1b, 0xf0, 0xeb, 0x28, 0x18, 0x0d,
	0xb9, 0xb5, 0xd9, 0x29, 0x39, 0x15, 0x77, 0x79, 0x02, 0x3b, 0x50, 0x1f, 0xc5, 0x67, 0x2c, 0xf4,
	0xef, 0x85, 0xaf, 0x6f, 0xad, 0x1a, 0xf1, 0xb2, 0x90, 0xd9, 0x85, 0x1f, 0xdd, 0x87, 0x73, 0x0e,
	0x10, 0x27, 0x0f, 0xa2, 0x03, 0x2d, 0xcd, 0x95, 0xfe, 0x9a, 0xe9, 0x55, 0x27, 0xde, 0x22, 0x6c,
	0xfc, 0x19, 0xe8, 0x3c, 0xd7, 0xb3, 0x91, 0xf8, 0x5b, 0x9a, 0x30, 0x3b, 0x66, 0x63, 0x26, 0x02,
	0xd6, 0x17, 0x81, 0xd0, 0x13, 0xab, 0xd9, 0x29, 0x39, 0x6b, 0x6e, 0x0e, 0x33, 0xb7, 0x17, 0x47,
	0x52, 0x5b, 0xff, 0xd3, 0xa5, 0xd2, 0x18, 0x77, 0x61, 0x5d, 0xc4, 0xe6, 0x88, 0x5a, 0x74, 0x44,
	0x49, 0x41, 0x7b, 0x99, 0x84, 0x6c, 0x28, 0xbc, 0xf3, 0xc8, 0x9c, 0x85, 0xb5, 0x95, 0xdc, 0x48,
	0x0e, 0xc4, 0x2e, 0x20, 0xff, 0xa9, 0x25, 0xcb, 0x1f, 0xe1, 0x76, 0xa7, 0xec, 0x54, 0xdc, 0x82,
	0x19, 0xfb, 0x3d, 0x34, 0xe6, 0x31, 0x53, 0xb1, 0xf1, 0xe3, 0x45, 0x3e, 0x4f, 0x43, 0x46, 0x63,
	0xdc, 0x83, 0x2a, 0x97, 0xf2, 0xb3, 0x1a, 0x50, 0xc6, 0x6a, 0x6e, 0x5a, 0xd9, 0xbf, 0x00, 0xaf,
	0xb9, 0x14, 0xdf, 0x27, 0x67, 0xd3, 0x3b, 0x7c, 0x38, 0xa9, 0x7b, 0x50, 0x4d, 0x42, 0x98, 0x66,
	0x35, 0xad, 0xf0, 0x19, 0xc0, 0x98, 0xfa, 0x7c, 0x30, 0xca, 0x65, 0xd2, 0xc8, 0x20, 0xc6, 0x93,
	0x12, 0x83, 0x30, 0xcd, 0x29, 0x8d, 0xed, 0x53, 0xd8, 0x59, 0xd2, 0xfe, 0x47, 0xfb, 0x13, 0xd8,
	0xb9, 0xe4, 0xfa, 0x8b, 0x64, 0xde, 0x1d, 0x97, 0x3d, 0x2e, 0xc7, 0x8f, 0x7d, 0x69, 0xab, 0xfc,
	0x1f, 0x40, 0x4d, 0x8b, 0x21, 0x57, 0x9a, 0x0d, 0x63, 0xb2, 0x5f, 0x71, 0xe7, 0x40, 0xa1, 0xfb,
	0x1e, 0xec, 0x2e, 0x4b, 0xab, 0x18, 0x4f, 0xa0, 0xaa, 0xa8, 0xb2, 0x4a, 0x9d, 0xb2, 0x53, 0x3f,
	0x7e, 0xd1, 0x2d, 0x7a, 0x78, 0xba, 0xf9, 0x85, 0xe9, 0x12, 0xfb, 0x04, 0x9a, 0xb9, 0x09, 0xe3,
	0x77, 0xd6, 0x8d, 0x36, 0x9e, 0x54, 0xb3, 0xcc, 0xad, 0xcd, 0x33, 0x77, 0xfc, 0xbb, 0x0c, 0xfb,
	0x57, 0xa9, 0xc4, 0x34, 0x10, 0xa6, 0x8d, 0xf0, 0x38, 0x7e, 0x83, 0x46, 0xf6, 0x9d, 0xc3, 0x57,
	0xc5, 0xae, 0x16, 0xde, 0xc2, 0xf6, 0x0a, 0xf3, 0xb9, 0x57, 0xd0, 0xfe, 0x0f, 0x7b, 0xb0, 0x39,
	0x15, 0xc4, 0xe7, 0xc5, 0x4b, 0x32, 0x0f, 0x61, 0xdb, 0x7e, 0x8c, 0x42, 0x4d, 0x6f, 0xa1, 0xb5,
	0x10, 0x0f, 0x74, 0x8a, 0x17, 0x2e, 0x27, 0xb8, 0x7d, 0xf8, 0x44, 0x26, 0x29, 0xdd, 0xc1, 0xd6,
	0xe2, 0x55, 0xe2, 0xe1, 0xca, 0x03, 0x5a, 0x4c, 0x5b, 0xfb, 0xe8, 0xa9, 0x54, 0x23, 0xd6, 0xaf,
	0xd2, 0xef, 0xe8, 0xdd, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x33, 0xc4, 0x59, 0xa9, 0x06,
	0x00, 0x00,
}
