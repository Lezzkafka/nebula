syntax = "proto3";
package register_provider_pb;

service ProviderRegisterService {

    rpc GetPublicKey(GetPublicKeyReq) returns (GetPublicKeyResp){}

    rpc Register(RegisterReq) returns (RegisterResp){}

    rpc VerifyBillEmail(VerifyBillEmailReq) returns (VerifyBillEmailResp){}

    rpc ResendVerifyCode(ResendVerifyCodeReq) returns (ResendVerifyCodeResp){}
    
    rpc GetTrackerServer(GetTrackerServerReq)returns (GetTrackerServerResp){}

}
message GetPublicKeyReq {
    uint32 version =1;
}

message GetPublicKeyResp {
    bytes publicKey=1;
}

message RegisterReq{
    uint32 version =1;
    bytes auth = 2;
    bytes nodeIdEnc = 3;
    bytes publicKeyEnc = 4;
    bytes encryptKeyEnc = 5;
    bytes walletAddressEnc=6;
    bytes billEmailEnc=7;
    uint64 mainStorageVolume=8;
    uint64 upBandwidth=9;
    uint64 downBandwidth=10;
    uint64 testUpBandwidth=11;
    uint64 testDownBandwidth=12;
    float availability=13;
    uint32 port=14;
    bytes ipEnc=15;
    bytes dynamicDomain=16;
    repeated uint64 extraStorageVolume=17;
}

message RegisterResp{
    uint32 code = 1;//0:success, other value: failed
    string errMsg=2;
}

message VerifyBillEmailReq{
    uint32 version = 1;
    bytes nodeId = 2;
    string verifyCode=3;
    bytes sign = 4;
}

message VerifyBillEmailResp{
    uint32 code = 1;//0:success, other value: failed
    string errMsg=2;
}

message ResendVerifyCodeReq{
    uint32 version=1;
    bytes nodeId=2;
    uint64 timestamp=3;
    bytes sign = 4;
}

message ResendVerifyCodeResp{
    bool success=1;
}

message GetTrackerServerReq{
    uint32 version=1;
    bytes nodeId=2;
    uint64 timestamp=3;
    bytes sign = 4;
}

message GetTrackerServerResp{
    repeated TrackerServer server=1;
}

message TrackerServer{
    string server=1;
    uint32 port=2;
}