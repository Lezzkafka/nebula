// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client_register.proto

/*
Package register_client_pb is a generated protocol buffer package.

It is generated from these files:
	client_register.proto

It has these top-level messages:
	GetPublicKeyReq
	GetPublicKeyResp
	RegisterReq
	RegisterResp
	VerifyContactEmailReq
	VerifyContactEmailResp
	ResendVerifyCodeReq
	ResendVerifyCodeResp
	GetTrackerServerReq
	GetTrackerServerResp
	TrackerServer
	AllPackageReq
	AllPackageResp
	Package
	PackageInfoReq
	PackageInfoResp
	BuyPackageReq
	Order
	BuyPackageResp
	MyAllOrderReq
	MyAllOrderResp
	OrderInfoReq
	OrderInfoResp
	RechargeAddressReq
	RechargeAddressResp
	PayOrderReq
	PayOrderResp
	UsageAmountReq
	UsageAmountResp
*/
package register_client_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetPublicKeyReq struct {
	Version uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *GetPublicKeyReq) Reset()                    { *m = GetPublicKeyReq{} }
func (m *GetPublicKeyReq) String() string            { return proto.CompactTextString(m) }
func (*GetPublicKeyReq) ProtoMessage()               {}
func (*GetPublicKeyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetPublicKeyReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type GetPublicKeyResp struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
}

func (m *GetPublicKeyResp) Reset()                    { *m = GetPublicKeyResp{} }
func (m *GetPublicKeyResp) String() string            { return proto.CompactTextString(m) }
func (*GetPublicKeyResp) ProtoMessage()               {}
func (*GetPublicKeyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetPublicKeyResp) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type RegisterReq struct {
	Version         uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId          []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	PublicKeyEnc    []byte `protobuf:"bytes,3,opt,name=publicKeyEnc,proto3" json:"publicKeyEnc,omitempty"`
	ContactEmailEnc []byte `protobuf:"bytes,4,opt,name=contactEmailEnc,proto3" json:"contactEmailEnc,omitempty"`
}

func (m *RegisterReq) Reset()                    { *m = RegisterReq{} }
func (m *RegisterReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()               {}
func (*RegisterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RegisterReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *RegisterReq) GetPublicKeyEnc() []byte {
	if m != nil {
		return m.PublicKeyEnc
	}
	return nil
}

func (m *RegisterReq) GetContactEmailEnc() []byte {
	if m != nil {
		return m.ContactEmailEnc
	}
	return nil
}

type RegisterResp struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *RegisterResp) Reset()                    { *m = RegisterResp{} }
func (m *RegisterResp) String() string            { return proto.CompactTextString(m) }
func (*RegisterResp) ProtoMessage()               {}
func (*RegisterResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RegisterResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RegisterResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type VerifyContactEmailReq struct {
	Version    uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId     []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp  uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	VerifyCode string `protobuf:"bytes,4,opt,name=verifyCode" json:"verifyCode,omitempty"`
	Sign       []byte `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *VerifyContactEmailReq) Reset()                    { *m = VerifyContactEmailReq{} }
func (m *VerifyContactEmailReq) String() string            { return proto.CompactTextString(m) }
func (*VerifyContactEmailReq) ProtoMessage()               {}
func (*VerifyContactEmailReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VerifyContactEmailReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VerifyContactEmailReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *VerifyContactEmailReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *VerifyContactEmailReq) GetVerifyCode() string {
	if m != nil {
		return m.VerifyCode
	}
	return ""
}

func (m *VerifyContactEmailReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type VerifyContactEmailResp struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *VerifyContactEmailResp) Reset()                    { *m = VerifyContactEmailResp{} }
func (m *VerifyContactEmailResp) String() string            { return proto.CompactTextString(m) }
func (*VerifyContactEmailResp) ProtoMessage()               {}
func (*VerifyContactEmailResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *VerifyContactEmailResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *VerifyContactEmailResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type ResendVerifyCodeReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Sign      []byte `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *ResendVerifyCodeReq) Reset()                    { *m = ResendVerifyCodeReq{} }
func (m *ResendVerifyCodeReq) String() string            { return proto.CompactTextString(m) }
func (*ResendVerifyCodeReq) ProtoMessage()               {}
func (*ResendVerifyCodeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ResendVerifyCodeReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ResendVerifyCodeReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *ResendVerifyCodeReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ResendVerifyCodeReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type ResendVerifyCodeResp struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ResendVerifyCodeResp) Reset()                    { *m = ResendVerifyCodeResp{} }
func (m *ResendVerifyCodeResp) String() string            { return proto.CompactTextString(m) }
func (*ResendVerifyCodeResp) ProtoMessage()               {}
func (*ResendVerifyCodeResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ResendVerifyCodeResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type GetTrackerServerReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Sign      []byte `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *GetTrackerServerReq) Reset()                    { *m = GetTrackerServerReq{} }
func (m *GetTrackerServerReq) String() string            { return proto.CompactTextString(m) }
func (*GetTrackerServerReq) ProtoMessage()               {}
func (*GetTrackerServerReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetTrackerServerReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetTrackerServerReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *GetTrackerServerReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GetTrackerServerReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type GetTrackerServerResp struct {
	Server []*TrackerServer `protobuf:"bytes,1,rep,name=server" json:"server,omitempty"`
}

func (m *GetTrackerServerResp) Reset()                    { *m = GetTrackerServerResp{} }
func (m *GetTrackerServerResp) String() string            { return proto.CompactTextString(m) }
func (*GetTrackerServerResp) ProtoMessage()               {}
func (*GetTrackerServerResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetTrackerServerResp) GetServer() []*TrackerServer {
	if m != nil {
		return m.Server
	}
	return nil
}

type TrackerServer struct {
	Server string `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	Port   uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *TrackerServer) Reset()                    { *m = TrackerServer{} }
func (m *TrackerServer) String() string            { return proto.CompactTextString(m) }
func (*TrackerServer) ProtoMessage()               {}
func (*TrackerServer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TrackerServer) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *TrackerServer) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type AllPackageReq struct {
	Version uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *AllPackageReq) Reset()                    { *m = AllPackageReq{} }
func (m *AllPackageReq) String() string            { return proto.CompactTextString(m) }
func (*AllPackageReq) ProtoMessage()               {}
func (*AllPackageReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AllPackageReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type AllPackageResp struct {
	AllPackage []*Package `protobuf:"bytes,1,rep,name=allPackage" json:"allPackage,omitempty"`
}

func (m *AllPackageResp) Reset()                    { *m = AllPackageResp{} }
func (m *AllPackageResp) String() string            { return proto.CompactTextString(m) }
func (*AllPackageResp) ProtoMessage()               {}
func (*AllPackageResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AllPackageResp) GetAllPackage() []*Package {
	if m != nil {
		return m.AllPackage
	}
	return nil
}

type Package struct {
	Id          int64  `protobuf:"zigzag64,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Price       uint64 `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	Volume      uint32 `protobuf:"varint,4,opt,name=volume" json:"volume,omitempty"`
	Netflow     uint32 `protobuf:"varint,5,opt,name=netflow" json:"netflow,omitempty"`
	UpNetflow   uint32 `protobuf:"varint,6,opt,name=upNetflow" json:"upNetflow,omitempty"`
	DownNetflow uint32 `protobuf:"varint,7,opt,name=downNetflow" json:"downNetflow,omitempty"`
	ValidDays   uint32 `protobuf:"varint,8,opt,name=validDays" json:"validDays,omitempty"`
	Remark      string `protobuf:"bytes,9,opt,name=remark" json:"remark,omitempty"`
}

func (m *Package) Reset()                    { *m = Package{} }
func (m *Package) String() string            { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()               {}
func (*Package) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Package) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Package) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Package) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Package) GetVolume() uint32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Package) GetNetflow() uint32 {
	if m != nil {
		return m.Netflow
	}
	return 0
}

func (m *Package) GetUpNetflow() uint32 {
	if m != nil {
		return m.UpNetflow
	}
	return 0
}

func (m *Package) GetDownNetflow() uint32 {
	if m != nil {
		return m.DownNetflow
	}
	return 0
}

func (m *Package) GetValidDays() uint32 {
	if m != nil {
		return m.ValidDays
	}
	return 0
}

func (m *Package) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

type PackageInfoReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	PackageId int64  `protobuf:"zigzag64,2,opt,name=packageId" json:"packageId,omitempty"`
}

func (m *PackageInfoReq) Reset()                    { *m = PackageInfoReq{} }
func (m *PackageInfoReq) String() string            { return proto.CompactTextString(m) }
func (*PackageInfoReq) ProtoMessage()               {}
func (*PackageInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PackageInfoReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PackageInfoReq) GetPackageId() int64 {
	if m != nil {
		return m.PackageId
	}
	return 0
}

type PackageInfoResp struct {
	Package *Package `protobuf:"bytes,1,opt,name=package" json:"package,omitempty"`
}

func (m *PackageInfoResp) Reset()                    { *m = PackageInfoResp{} }
func (m *PackageInfoResp) String() string            { return proto.CompactTextString(m) }
func (*PackageInfoResp) ProtoMessage()               {}
func (*PackageInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PackageInfoResp) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

type BuyPackageReq struct {
	Version      uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId       []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp    uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	PackageId    int64  `protobuf:"zigzag64,4,opt,name=packageId" json:"packageId,omitempty"`
	Quanlity     uint32 `protobuf:"varint,5,opt,name=quanlity" json:"quanlity,omitempty"`
	CancelUnpaid bool   `protobuf:"varint,6,opt,name=cancelUnpaid" json:"cancelUnpaid,omitempty"`
	Sign         []byte `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *BuyPackageReq) Reset()                    { *m = BuyPackageReq{} }
func (m *BuyPackageReq) String() string            { return proto.CompactTextString(m) }
func (*BuyPackageReq) ProtoMessage()               {}
func (*BuyPackageReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *BuyPackageReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BuyPackageReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *BuyPackageReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BuyPackageReq) GetPackageId() int64 {
	if m != nil {
		return m.PackageId
	}
	return 0
}

func (m *BuyPackageReq) GetQuanlity() uint32 {
	if m != nil {
		return m.Quanlity
	}
	return 0
}

func (m *BuyPackageReq) GetCancelUnpaid() bool {
	if m != nil {
		return m.CancelUnpaid
	}
	return false
}

func (m *BuyPackageReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type Order struct {
	Id          []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creation    uint64   `protobuf:"varint,2,opt,name=creation" json:"creation,omitempty"`
	PackageId   int64    `protobuf:"zigzag64,3,opt,name=packageId" json:"packageId,omitempty"`
	Package     *Package `protobuf:"bytes,4,opt,name=package" json:"package,omitempty"`
	Quanlity    uint32   `protobuf:"varint,5,opt,name=quanlity" json:"quanlity,omitempty"`
	TotalAmount uint64   `protobuf:"varint,6,opt,name=totalAmount" json:"totalAmount,omitempty"`
	Upgraded    bool     `protobuf:"varint,7,opt,name=upgraded" json:"upgraded,omitempty"`
	Discount    float32  `protobuf:"fixed32,8,opt,name=discount" json:"discount,omitempty"`
	Volume      uint32   `protobuf:"varint,9,opt,name=volume" json:"volume,omitempty"`
	Netflow     uint32   `protobuf:"varint,10,opt,name=netflow" json:"netflow,omitempty"`
	UpNetflow   uint32   `protobuf:"varint,11,opt,name=upNetflow" json:"upNetflow,omitempty"`
	DownNetflow uint32   `protobuf:"varint,12,opt,name=downNetflow" json:"downNetflow,omitempty"`
	ValidDays   uint32   `protobuf:"varint,13,opt,name=validDays" json:"validDays,omitempty"`
	StartTime   uint64   `protobuf:"varint,14,opt,name=startTime" json:"startTime,omitempty"`
	EndTime     uint64   `protobuf:"varint,15,opt,name=endTime" json:"endTime,omitempty"`
	Paid        bool     `protobuf:"varint,16,opt,name=paid" json:"paid,omitempty"`
	PayTime     uint64   `protobuf:"varint,17,opt,name=payTime" json:"payTime,omitempty"`
	Remark      string   `protobuf:"bytes,18,opt,name=remark" json:"remark,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Order) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Order) GetCreation() uint64 {
	if m != nil {
		return m.Creation
	}
	return 0
}

func (m *Order) GetPackageId() int64 {
	if m != nil {
		return m.PackageId
	}
	return 0
}

func (m *Order) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *Order) GetQuanlity() uint32 {
	if m != nil {
		return m.Quanlity
	}
	return 0
}

func (m *Order) GetTotalAmount() uint64 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

func (m *Order) GetUpgraded() bool {
	if m != nil {
		return m.Upgraded
	}
	return false
}

func (m *Order) GetDiscount() float32 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *Order) GetVolume() uint32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Order) GetNetflow() uint32 {
	if m != nil {
		return m.Netflow
	}
	return 0
}

func (m *Order) GetUpNetflow() uint32 {
	if m != nil {
		return m.UpNetflow
	}
	return 0
}

func (m *Order) GetDownNetflow() uint32 {
	if m != nil {
		return m.DownNetflow
	}
	return 0
}

func (m *Order) GetValidDays() uint32 {
	if m != nil {
		return m.ValidDays
	}
	return 0
}

func (m *Order) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Order) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Order) GetPaid() bool {
	if m != nil {
		return m.Paid
	}
	return false
}

func (m *Order) GetPayTime() uint64 {
	if m != nil {
		return m.PayTime
	}
	return 0
}

func (m *Order) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

type BuyPackageResp struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
	Order  *Order `protobuf:"bytes,3,opt,name=order" json:"order,omitempty"`
}

func (m *BuyPackageResp) Reset()                    { *m = BuyPackageResp{} }
func (m *BuyPackageResp) String() string            { return proto.CompactTextString(m) }
func (*BuyPackageResp) ProtoMessage()               {}
func (*BuyPackageResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BuyPackageResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *BuyPackageResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *BuyPackageResp) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type MyAllOrderReq struct {
	Version        uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId         []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp      uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	OnlyNotExpired bool   `protobuf:"varint,4,opt,name=onlyNotExpired" json:"onlyNotExpired,omitempty"`
	Sign           []byte `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *MyAllOrderReq) Reset()                    { *m = MyAllOrderReq{} }
func (m *MyAllOrderReq) String() string            { return proto.CompactTextString(m) }
func (*MyAllOrderReq) ProtoMessage()               {}
func (*MyAllOrderReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *MyAllOrderReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MyAllOrderReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *MyAllOrderReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MyAllOrderReq) GetOnlyNotExpired() bool {
	if m != nil {
		return m.OnlyNotExpired
	}
	return false
}

func (m *MyAllOrderReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type MyAllOrderResp struct {
	Code       uint32   `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg     string   `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
	MyAllOrder []*Order `protobuf:"bytes,3,rep,name=myAllOrder" json:"myAllOrder,omitempty"`
}

func (m *MyAllOrderResp) Reset()                    { *m = MyAllOrderResp{} }
func (m *MyAllOrderResp) String() string            { return proto.CompactTextString(m) }
func (*MyAllOrderResp) ProtoMessage()               {}
func (*MyAllOrderResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *MyAllOrderResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MyAllOrderResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *MyAllOrderResp) GetMyAllOrder() []*Order {
	if m != nil {
		return m.MyAllOrder
	}
	return nil
}

type OrderInfoReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	OrderId   []byte `protobuf:"bytes,4,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Sign      []byte `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *OrderInfoReq) Reset()                    { *m = OrderInfoReq{} }
func (m *OrderInfoReq) String() string            { return proto.CompactTextString(m) }
func (*OrderInfoReq) ProtoMessage()               {}
func (*OrderInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *OrderInfoReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *OrderInfoReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *OrderInfoReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *OrderInfoReq) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *OrderInfoReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type OrderInfoResp struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
	Order  *Order `protobuf:"bytes,3,opt,name=order" json:"order,omitempty"`
}

func (m *OrderInfoResp) Reset()                    { *m = OrderInfoResp{} }
func (m *OrderInfoResp) String() string            { return proto.CompactTextString(m) }
func (*OrderInfoResp) ProtoMessage()               {}
func (*OrderInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *OrderInfoResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *OrderInfoResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *OrderInfoResp) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type RechargeAddressReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Sign      []byte `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *RechargeAddressReq) Reset()                    { *m = RechargeAddressReq{} }
func (m *RechargeAddressReq) String() string            { return proto.CompactTextString(m) }
func (*RechargeAddressReq) ProtoMessage()               {}
func (*RechargeAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *RechargeAddressReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RechargeAddressReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *RechargeAddressReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RechargeAddressReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type RechargeAddressResp struct {
	Code            uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg          string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
	RechargeAddress string `protobuf:"bytes,3,opt,name=rechargeAddress" json:"rechargeAddress,omitempty"`
	Balance         uint64 `protobuf:"varint,4,opt,name=balance" json:"balance,omitempty"`
}

func (m *RechargeAddressResp) Reset()                    { *m = RechargeAddressResp{} }
func (m *RechargeAddressResp) String() string            { return proto.CompactTextString(m) }
func (*RechargeAddressResp) ProtoMessage()               {}
func (*RechargeAddressResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RechargeAddressResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RechargeAddressResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *RechargeAddressResp) GetRechargeAddress() string {
	if m != nil {
		return m.RechargeAddress
	}
	return ""
}

func (m *RechargeAddressResp) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type PayOrderReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	OrderId   []byte `protobuf:"bytes,4,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Sign      []byte `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *PayOrderReq) Reset()                    { *m = PayOrderReq{} }
func (m *PayOrderReq) String() string            { return proto.CompactTextString(m) }
func (*PayOrderReq) ProtoMessage()               {}
func (*PayOrderReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *PayOrderReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PayOrderReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *PayOrderReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *PayOrderReq) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *PayOrderReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type PayOrderResp struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *PayOrderResp) Reset()                    { *m = PayOrderResp{} }
func (m *PayOrderResp) String() string            { return proto.CompactTextString(m) }
func (*PayOrderResp) ProtoMessage()               {}
func (*PayOrderResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *PayOrderResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PayOrderResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type UsageAmountReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Sign      []byte `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *UsageAmountReq) Reset()                    { *m = UsageAmountReq{} }
func (m *UsageAmountReq) String() string            { return proto.CompactTextString(m) }
func (*UsageAmountReq) ProtoMessage()               {}
func (*UsageAmountReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *UsageAmountReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UsageAmountReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *UsageAmountReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UsageAmountReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type UsageAmountResp struct {
	Code             uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg           string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
	Volume           uint32 `protobuf:"varint,3,opt,name=volume" json:"volume,omitempty"`
	Netflow          uint32 `protobuf:"varint,4,opt,name=netflow" json:"netflow,omitempty"`
	UpNetflow        uint32 `protobuf:"varint,5,opt,name=upNetflow" json:"upNetflow,omitempty"`
	DownNetflow      uint32 `protobuf:"varint,6,opt,name=downNetflow" json:"downNetflow,omitempty"`
	UsageVolume      uint32 `protobuf:"varint,7,opt,name=usageVolume" json:"usageVolume,omitempty"`
	UsageNetflow     uint32 `protobuf:"varint,8,opt,name=usageNetflow" json:"usageNetflow,omitempty"`
	UsageUpNetflow   uint32 `protobuf:"varint,9,opt,name=usageUpNetflow" json:"usageUpNetflow,omitempty"`
	UsageDownNetflow uint32 `protobuf:"varint,10,opt,name=usageDownNetflow" json:"usageDownNetflow,omitempty"`
	EndTime          uint64 `protobuf:"varint,11,opt,name=endTime" json:"endTime,omitempty"`
}

func (m *UsageAmountResp) Reset()                    { *m = UsageAmountResp{} }
func (m *UsageAmountResp) String() string            { return proto.CompactTextString(m) }
func (*UsageAmountResp) ProtoMessage()               {}
func (*UsageAmountResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *UsageAmountResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UsageAmountResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *UsageAmountResp) GetVolume() uint32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *UsageAmountResp) GetNetflow() uint32 {
	if m != nil {
		return m.Netflow
	}
	return 0
}

func (m *UsageAmountResp) GetUpNetflow() uint32 {
	if m != nil {
		return m.UpNetflow
	}
	return 0
}

func (m *UsageAmountResp) GetDownNetflow() uint32 {
	if m != nil {
		return m.DownNetflow
	}
	return 0
}

func (m *UsageAmountResp) GetUsageVolume() uint32 {
	if m != nil {
		return m.UsageVolume
	}
	return 0
}

func (m *UsageAmountResp) GetUsageNetflow() uint32 {
	if m != nil {
		return m.UsageNetflow
	}
	return 0
}

func (m *UsageAmountResp) GetUsageUpNetflow() uint32 {
	if m != nil {
		return m.UsageUpNetflow
	}
	return 0
}

func (m *UsageAmountResp) GetUsageDownNetflow() uint32 {
	if m != nil {
		return m.UsageDownNetflow
	}
	return 0
}

func (m *UsageAmountResp) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func init() {
	proto.RegisterType((*GetPublicKeyReq)(nil), "register.client.pb.GetPublicKeyReq")
	proto.RegisterType((*GetPublicKeyResp)(nil), "register.client.pb.GetPublicKeyResp")
	proto.RegisterType((*RegisterReq)(nil), "register.client.pb.RegisterReq")
	proto.RegisterType((*RegisterResp)(nil), "register.client.pb.RegisterResp")
	proto.RegisterType((*VerifyContactEmailReq)(nil), "register.client.pb.VerifyContactEmailReq")
	proto.RegisterType((*VerifyContactEmailResp)(nil), "register.client.pb.VerifyContactEmailResp")
	proto.RegisterType((*ResendVerifyCodeReq)(nil), "register.client.pb.ResendVerifyCodeReq")
	proto.RegisterType((*ResendVerifyCodeResp)(nil), "register.client.pb.ResendVerifyCodeResp")
	proto.RegisterType((*GetTrackerServerReq)(nil), "register.client.pb.GetTrackerServerReq")
	proto.RegisterType((*GetTrackerServerResp)(nil), "register.client.pb.GetTrackerServerResp")
	proto.RegisterType((*TrackerServer)(nil), "register.client.pb.TrackerServer")
	proto.RegisterType((*AllPackageReq)(nil), "register.client.pb.AllPackageReq")
	proto.RegisterType((*AllPackageResp)(nil), "register.client.pb.AllPackageResp")
	proto.RegisterType((*Package)(nil), "register.client.pb.Package")
	proto.RegisterType((*PackageInfoReq)(nil), "register.client.pb.PackageInfoReq")
	proto.RegisterType((*PackageInfoResp)(nil), "register.client.pb.PackageInfoResp")
	proto.RegisterType((*BuyPackageReq)(nil), "register.client.pb.BuyPackageReq")
	proto.RegisterType((*Order)(nil), "register.client.pb.Order")
	proto.RegisterType((*BuyPackageResp)(nil), "register.client.pb.BuyPackageResp")
	proto.RegisterType((*MyAllOrderReq)(nil), "register.client.pb.MyAllOrderReq")
	proto.RegisterType((*MyAllOrderResp)(nil), "register.client.pb.MyAllOrderResp")
	proto.RegisterType((*OrderInfoReq)(nil), "register.client.pb.OrderInfoReq")
	proto.RegisterType((*OrderInfoResp)(nil), "register.client.pb.OrderInfoResp")
	proto.RegisterType((*RechargeAddressReq)(nil), "register.client.pb.RechargeAddressReq")
	proto.RegisterType((*RechargeAddressResp)(nil), "register.client.pb.RechargeAddressResp")
	proto.RegisterType((*PayOrderReq)(nil), "register.client.pb.PayOrderReq")
	proto.RegisterType((*PayOrderResp)(nil), "register.client.pb.PayOrderResp")
	proto.RegisterType((*UsageAmountReq)(nil), "register.client.pb.UsageAmountReq")
	proto.RegisterType((*UsageAmountResp)(nil), "register.client.pb.UsageAmountResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClientRegisterService service

type ClientRegisterServiceClient interface {
	GetPublicKey(ctx context.Context, in *GetPublicKeyReq, opts ...grpc.CallOption) (*GetPublicKeyResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	VerifyContactEmail(ctx context.Context, in *VerifyContactEmailReq, opts ...grpc.CallOption) (*VerifyContactEmailResp, error)
	ResendVerifyCode(ctx context.Context, in *ResendVerifyCodeReq, opts ...grpc.CallOption) (*ResendVerifyCodeResp, error)
	GetTrackerServer(ctx context.Context, in *GetTrackerServerReq, opts ...grpc.CallOption) (*GetTrackerServerResp, error)
}

type clientRegisterServiceClient struct {
	cc *grpc.ClientConn
}

func NewClientRegisterServiceClient(cc *grpc.ClientConn) ClientRegisterServiceClient {
	return &clientRegisterServiceClient{cc}
}

func (c *clientRegisterServiceClient) GetPublicKey(ctx context.Context, in *GetPublicKeyReq, opts ...grpc.CallOption) (*GetPublicKeyResp, error) {
	out := new(GetPublicKeyResp)
	err := grpc.Invoke(ctx, "/register.client.pb.ClientRegisterService/GetPublicKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegisterServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := grpc.Invoke(ctx, "/register.client.pb.ClientRegisterService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegisterServiceClient) VerifyContactEmail(ctx context.Context, in *VerifyContactEmailReq, opts ...grpc.CallOption) (*VerifyContactEmailResp, error) {
	out := new(VerifyContactEmailResp)
	err := grpc.Invoke(ctx, "/register.client.pb.ClientRegisterService/VerifyContactEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegisterServiceClient) ResendVerifyCode(ctx context.Context, in *ResendVerifyCodeReq, opts ...grpc.CallOption) (*ResendVerifyCodeResp, error) {
	out := new(ResendVerifyCodeResp)
	err := grpc.Invoke(ctx, "/register.client.pb.ClientRegisterService/ResendVerifyCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegisterServiceClient) GetTrackerServer(ctx context.Context, in *GetTrackerServerReq, opts ...grpc.CallOption) (*GetTrackerServerResp, error) {
	out := new(GetTrackerServerResp)
	err := grpc.Invoke(ctx, "/register.client.pb.ClientRegisterService/GetTrackerServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClientRegisterService service

type ClientRegisterServiceServer interface {
	GetPublicKey(context.Context, *GetPublicKeyReq) (*GetPublicKeyResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	VerifyContactEmail(context.Context, *VerifyContactEmailReq) (*VerifyContactEmailResp, error)
	ResendVerifyCode(context.Context, *ResendVerifyCodeReq) (*ResendVerifyCodeResp, error)
	GetTrackerServer(context.Context, *GetTrackerServerReq) (*GetTrackerServerResp, error)
}

func RegisterClientRegisterServiceServer(s *grpc.Server, srv ClientRegisterServiceServer) {
	s.RegisterService(&_ClientRegisterService_serviceDesc, srv)
}

func _ClientRegisterService_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegisterServiceServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.ClientRegisterService/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegisterServiceServer).GetPublicKey(ctx, req.(*GetPublicKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegisterService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegisterServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.ClientRegisterService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegisterServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegisterService_VerifyContactEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyContactEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegisterServiceServer).VerifyContactEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.ClientRegisterService/VerifyContactEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegisterServiceServer).VerifyContactEmail(ctx, req.(*VerifyContactEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegisterService_ResendVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegisterServiceServer).ResendVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.ClientRegisterService/ResendVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegisterServiceServer).ResendVerifyCode(ctx, req.(*ResendVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegisterService_GetTrackerServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrackerServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegisterServiceServer).GetTrackerServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.ClientRegisterService/GetTrackerServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegisterServiceServer).GetTrackerServer(ctx, req.(*GetTrackerServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientRegisterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "register.client.pb.ClientRegisterService",
	HandlerType: (*ClientRegisterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicKey",
			Handler:    _ClientRegisterService_GetPublicKey_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ClientRegisterService_Register_Handler,
		},
		{
			MethodName: "VerifyContactEmail",
			Handler:    _ClientRegisterService_VerifyContactEmail_Handler,
		},
		{
			MethodName: "ResendVerifyCode",
			Handler:    _ClientRegisterService_ResendVerifyCode_Handler,
		},
		{
			MethodName: "GetTrackerServer",
			Handler:    _ClientRegisterService_GetTrackerServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_register.proto",
}

// Client API for OrderService service

type OrderServiceClient interface {
	AllPackage(ctx context.Context, in *AllPackageReq, opts ...grpc.CallOption) (*AllPackageResp, error)
	PackageInfo(ctx context.Context, in *PackageInfoReq, opts ...grpc.CallOption) (*PackageInfoResp, error)
	BuyPackage(ctx context.Context, in *BuyPackageReq, opts ...grpc.CallOption) (*BuyPackageResp, error)
	MyAllOrder(ctx context.Context, in *MyAllOrderReq, opts ...grpc.CallOption) (*MyAllOrderResp, error)
	OrderInfo(ctx context.Context, in *OrderInfoReq, opts ...grpc.CallOption) (*OrderInfoResp, error)
	RechargeAddress(ctx context.Context, in *RechargeAddressReq, opts ...grpc.CallOption) (*RechargeAddressResp, error)
	PayOrder(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*PayOrderResp, error)
	UsageAmount(ctx context.Context, in *UsageAmountReq, opts ...grpc.CallOption) (*UsageAmountResp, error)
}

type orderServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrderServiceClient(cc *grpc.ClientConn) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) AllPackage(ctx context.Context, in *AllPackageReq, opts ...grpc.CallOption) (*AllPackageResp, error) {
	out := new(AllPackageResp)
	err := grpc.Invoke(ctx, "/register.client.pb.OrderService/AllPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) PackageInfo(ctx context.Context, in *PackageInfoReq, opts ...grpc.CallOption) (*PackageInfoResp, error) {
	out := new(PackageInfoResp)
	err := grpc.Invoke(ctx, "/register.client.pb.OrderService/PackageInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) BuyPackage(ctx context.Context, in *BuyPackageReq, opts ...grpc.CallOption) (*BuyPackageResp, error) {
	out := new(BuyPackageResp)
	err := grpc.Invoke(ctx, "/register.client.pb.OrderService/BuyPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) MyAllOrder(ctx context.Context, in *MyAllOrderReq, opts ...grpc.CallOption) (*MyAllOrderResp, error) {
	out := new(MyAllOrderResp)
	err := grpc.Invoke(ctx, "/register.client.pb.OrderService/MyAllOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderInfo(ctx context.Context, in *OrderInfoReq, opts ...grpc.CallOption) (*OrderInfoResp, error) {
	out := new(OrderInfoResp)
	err := grpc.Invoke(ctx, "/register.client.pb.OrderService/OrderInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) RechargeAddress(ctx context.Context, in *RechargeAddressReq, opts ...grpc.CallOption) (*RechargeAddressResp, error) {
	out := new(RechargeAddressResp)
	err := grpc.Invoke(ctx, "/register.client.pb.OrderService/RechargeAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) PayOrder(ctx context.Context, in *PayOrderReq, opts ...grpc.CallOption) (*PayOrderResp, error) {
	out := new(PayOrderResp)
	err := grpc.Invoke(ctx, "/register.client.pb.OrderService/PayOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UsageAmount(ctx context.Context, in *UsageAmountReq, opts ...grpc.CallOption) (*UsageAmountResp, error) {
	out := new(UsageAmountResp)
	err := grpc.Invoke(ctx, "/register.client.pb.OrderService/UsageAmount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceServer interface {
	AllPackage(context.Context, *AllPackageReq) (*AllPackageResp, error)
	PackageInfo(context.Context, *PackageInfoReq) (*PackageInfoResp, error)
	BuyPackage(context.Context, *BuyPackageReq) (*BuyPackageResp, error)
	MyAllOrder(context.Context, *MyAllOrderReq) (*MyAllOrderResp, error)
	OrderInfo(context.Context, *OrderInfoReq) (*OrderInfoResp, error)
	RechargeAddress(context.Context, *RechargeAddressReq) (*RechargeAddressResp, error)
	PayOrder(context.Context, *PayOrderReq) (*PayOrderResp, error)
	UsageAmount(context.Context, *UsageAmountReq) (*UsageAmountResp, error)
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_AllPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllPackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AllPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.OrderService/AllPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AllPackage(ctx, req.(*AllPackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_PackageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).PackageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.OrderService/PackageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).PackageInfo(ctx, req.(*PackageInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_BuyPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyPackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).BuyPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.OrderService/BuyPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).BuyPackage(ctx, req.(*BuyPackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_MyAllOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyAllOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).MyAllOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.OrderService/MyAllOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).MyAllOrder(ctx, req.(*MyAllOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.OrderService/OrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderInfo(ctx, req.(*OrderInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_RechargeAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).RechargeAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.OrderService/RechargeAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).RechargeAddress(ctx, req.(*RechargeAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_PayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).PayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.OrderService/PayOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).PayOrder(ctx, req.(*PayOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UsageAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsageAmountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UsageAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.OrderService/UsageAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UsageAmount(ctx, req.(*UsageAmountReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "register.client.pb.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllPackage",
			Handler:    _OrderService_AllPackage_Handler,
		},
		{
			MethodName: "PackageInfo",
			Handler:    _OrderService_PackageInfo_Handler,
		},
		{
			MethodName: "BuyPackage",
			Handler:    _OrderService_BuyPackage_Handler,
		},
		{
			MethodName: "MyAllOrder",
			Handler:    _OrderService_MyAllOrder_Handler,
		},
		{
			MethodName: "OrderInfo",
			Handler:    _OrderService_OrderInfo_Handler,
		},
		{
			MethodName: "RechargeAddress",
			Handler:    _OrderService_RechargeAddress_Handler,
		},
		{
			MethodName: "PayOrder",
			Handler:    _OrderService_PayOrder_Handler,
		},
		{
			MethodName: "UsageAmount",
			Handler:    _OrderService_UsageAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_register.proto",
}

func init() { proto.RegisterFile("client_register.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0xb7, 0x64, 0xc9, 0x92, 0x46, 0x5f, 0xfe, 0xef, 0xdf, 0x0e, 0x54, 0xd5, 0x68, 0x15, 0xa6,
	0x48, 0x9c, 0x14, 0x70, 0x03, 0x17, 0x3d, 0x24, 0x39, 0xb9, 0xb1, 0x91, 0x04, 0x85, 0x13, 0x77,
	0x1b, 0x1b, 0x05, 0x7a, 0x28, 0xd6, 0xe4, 0x5a, 0x25, 0x4c, 0x91, 0xcc, 0x2e, 0x65, 0x47, 0x0f,
	0xd0, 0x5e, 0x9a, 0x3e, 0x41, 0x9f, 0xaa, 0x7d, 0x85, 0x1e, 0xfb, 0x12, 0xc5, 0x0e, 0x3f, 0xb4,
	0xa4, 0xd6, 0x92, 0x65, 0xc0, 0xb9, 0x71, 0x66, 0x67, 0x67, 0x7e, 0xb3, 0x33, 0xb3, 0x33, 0x4b,
	0xd8, 0xb4, 0x3d, 0x97, 0xfb, 0xd1, 0xcf, 0x82, 0x0f, 0x5d, 0x19, 0x71, 0xb1, 0x13, 0x8a, 0x20,
	0x0a, 0x08, 0xc9, 0xe8, 0x78, 0x7d, 0x27, 0x3c, 0xb5, 0xbe, 0x84, 0xee, 0x0b, 0x1e, 0x1d, 0x8d,
	0x4f, 0x3d, 0xd7, 0xfe, 0x8e, 0x4f, 0x28, 0x7f, 0x47, 0x7a, 0x50, 0xbb, 0xe0, 0x42, 0xba, 0x81,
	0xdf, 0x2b, 0x0d, 0x4a, 0xdb, 0x6d, 0x9a, 0x92, 0xd6, 0x63, 0x58, 0xcf, 0x0b, 0xcb, 0x90, 0x6c,
	0x41, 0x23, 0x4c, 0x19, 0x28, 0xdf, 0xa2, 0x53, 0x86, 0xf5, 0x47, 0x09, 0x9a, 0x34, 0xb1, 0x3a,
	0x57, 0x37, 0xb9, 0x03, 0x6b, 0x7e, 0xe0, 0xf0, 0x57, 0x4e, 0xaf, 0x8c, 0x4a, 0x12, 0x8a, 0x58,
	0xd0, 0xca, 0xd4, 0x1d, 0xf8, 0x76, 0x6f, 0x15, 0x57, 0x73, 0x3c, 0xb2, 0x0d, 0x5d, 0x3b, 0xf0,
	0x23, 0x66, 0x47, 0x07, 0x23, 0xe6, 0x7a, 0x4a, 0xac, 0x82, 0x62, 0x45, 0xb6, 0xf5, 0x14, 0x5a,
	0x53, 0x38, 0x32, 0x24, 0x04, 0x2a, 0x76, 0xe0, 0xf0, 0x04, 0x0c, 0x7e, 0x2b, 0x24, 0x5c, 0x88,
	0x43, 0x39, 0x44, 0x24, 0x0d, 0x9a, 0x50, 0xd6, 0x9f, 0x25, 0xd8, 0x3c, 0xe1, 0xc2, 0x3d, 0x9b,
	0x3c, 0xd7, 0xb4, 0xde, 0xcc, 0xab, 0x2d, 0x68, 0x44, 0xee, 0x88, 0xcb, 0x88, 0x8d, 0x42, 0x74,
	0xa9, 0x42, 0xa7, 0x0c, 0xf2, 0x19, 0xc0, 0x45, 0x62, 0xc8, 0xe1, 0xe8, 0x4a, 0x83, 0x6a, 0x1c,
	0x85, 0x5a, 0xba, 0x43, 0xbf, 0x57, 0x45, 0x9d, 0xf8, 0x6d, 0xed, 0xc3, 0x1d, 0x13, 0xb8, 0x25,
	0x7d, 0x9c, 0xc0, 0xff, 0x29, 0x97, 0xdc, 0x77, 0x4e, 0x32, 0x6b, 0xb7, 0xe1, 0x60, 0xea, 0x40,
	0x45, 0x73, 0xe0, 0x31, 0x6c, 0xcc, 0x9a, 0x96, 0xa1, 0xb2, 0x2d, 0xc7, 0xb6, 0xcd, 0xa5, 0x44,
	0xdb, 0x75, 0x9a, 0x92, 0x0a, 0xec, 0x0b, 0x1e, 0xbd, 0x15, 0xcc, 0x3e, 0xe7, 0xe2, 0x07, 0x2e,
	0x2e, 0x6e, 0x9a, 0x63, 0xcb, 0x83, 0xfd, 0x1e, 0x36, 0x66, 0x4d, 0xcb, 0x90, 0x3c, 0x81, 0x35,
	0x89, 0x54, 0xaf, 0x34, 0x58, 0xdd, 0x6e, 0xee, 0xde, 0xdd, 0x99, 0xad, 0xb9, 0x9d, 0xfc, 0xb6,
	0x64, 0x83, 0xf5, 0x0c, 0xda, 0xb9, 0x05, 0x85, 0x36, 0xd3, 0x85, 0x31, 0x8a, 0x29, 0x85, 0x27,
	0x0c, 0x44, 0x84, 0x3e, 0xb4, 0x29, 0x7e, 0x5b, 0x0f, 0xa1, 0xbd, 0xe7, 0x79, 0x47, 0xcc, 0x3e,
	0x67, 0xc3, 0xf9, 0x11, 0xb3, 0x0e, 0xa1, 0xa3, 0x8b, 0xca, 0x90, 0x3c, 0x03, 0x60, 0x19, 0x27,
	0x01, 0xfe, 0xa9, 0x09, 0x78, 0xba, 0x49, 0x13, 0xb7, 0xfe, 0x2d, 0x41, 0x2d, 0xf9, 0x26, 0x1d,
	0x28, 0xbb, 0x0e, 0xda, 0x23, 0xb4, 0xec, 0x3a, 0x0a, 0xa9, 0xcf, 0x46, 0x3c, 0xc9, 0x31, 0xfc,
	0x26, 0x1b, 0x50, 0x0d, 0x85, 0x6b, 0xf3, 0xe4, 0x9c, 0x63, 0x42, 0xf9, 0x7a, 0x11, 0x78, 0xe3,
	0x51, 0x9c, 0xed, 0x6d, 0x9a, 0x50, 0xca, 0x0d, 0x9f, 0x47, 0x67, 0x5e, 0x70, 0x89, 0xc9, 0xde,
	0xa6, 0x29, 0xa9, 0x62, 0x36, 0x0e, 0x5f, 0x27, 0x6b, 0x6b, 0xb8, 0x36, 0x65, 0x90, 0x01, 0x34,
	0x9d, 0xe0, 0xd2, 0x4f, 0xd7, 0x6b, 0xb8, 0xae, 0xb3, 0xd4, 0xfe, 0x0b, 0xe6, 0xb9, 0xce, 0x3e,
	0x9b, 0xc8, 0x5e, 0x3d, 0xde, 0x9f, 0x31, 0x14, 0x1e, 0xc1, 0x47, 0x4c, 0x9c, 0xf7, 0x1a, 0xf1,
	0xd9, 0xc7, 0x94, 0xf5, 0x12, 0x3a, 0x89, 0xb3, 0xaf, 0xfc, 0xb3, 0x60, 0x7e, 0xb6, 0xa9, 0x9b,
	0x31, 0x91, 0x8d, 0x13, 0x8e, 0xd0, 0x29, 0xc3, 0x7a, 0x09, 0xdd, 0x9c, 0x26, 0x19, 0x92, 0x6f,
	0xa0, 0x16, 0x66, 0x41, 0x28, 0x2d, 0x0a, 0x42, 0x2a, 0x6b, 0xfd, 0x55, 0x82, 0xf6, 0xb7, 0xe3,
	0xc9, 0x75, 0x82, 0x7f, 0xc3, 0x0a, 0xc8, 0x79, 0x52, 0x29, 0x78, 0x42, 0xfa, 0x50, 0x7f, 0x37,
	0x66, 0xbe, 0xe7, 0x46, 0x93, 0x24, 0x48, 0x19, 0xad, 0x6e, 0x6f, 0x9b, 0xf9, 0x36, 0xf7, 0x8e,
	0xfd, 0x90, 0xb9, 0x0e, 0x06, 0xaa, 0x4e, 0x73, 0xbc, 0xac, 0xbe, 0x6a, 0x5a, 0x7d, 0x7d, 0xa8,
	0x40, 0xf5, 0x8d, 0x70, 0xb8, 0xd0, 0x72, 0xaa, 0x85, 0x39, 0xd5, 0x87, 0xba, 0x2d, 0x38, 0x8b,
	0x94, 0x73, 0x65, 0x04, 0x9a, 0xd1, 0x79, 0x9c, 0xab, 0x45, 0x9c, 0xda, 0xf1, 0x56, 0xae, 0x7f,
	0xbc, 0x73, 0xdd, 0x1b, 0x40, 0x33, 0x0a, 0x22, 0xe6, 0xed, 0x8d, 0x82, 0xb1, 0x1f, 0xa1, 0x77,
	0x15, 0xaa, 0xb3, 0xd4, 0xee, 0x71, 0x38, 0x14, 0xcc, 0xe1, 0x0e, 0x3a, 0x58, 0xa7, 0x19, 0xad,
	0xd6, 0x1c, 0x57, 0xda, 0xb8, 0x55, 0x65, 0x60, 0x99, 0x66, 0xb4, 0x56, 0x10, 0x8d, 0xab, 0x0a,
	0x02, 0xe6, 0x14, 0x44, 0x73, 0x41, 0x41, 0xb4, 0x16, 0x14, 0x44, 0xbb, 0x58, 0x10, 0x5b, 0xd0,
	0x90, 0x11, 0x13, 0xd1, 0x5b, 0x77, 0xc4, 0x7b, 0x9d, 0x38, 0x41, 0x32, 0x86, 0x42, 0xc5, 0x7d,
	0x07, 0xd7, 0xba, 0xb8, 0x96, 0x92, 0x78, 0x59, 0xa9, 0xc0, 0xaf, 0xa3, 0xef, 0xf8, 0xad, 0xa4,
	0x43, 0x36, 0x41, 0xe9, 0xff, 0xc5, 0xd2, 0x09, 0xa9, 0x95, 0x1d, 0xc9, 0x95, 0xdd, 0x08, 0x3a,
	0x7a, 0x86, 0x2f, 0xd7, 0xd4, 0xc8, 0x57, 0x50, 0x0d, 0x54, 0x2e, 0x61, 0x4a, 0x34, 0x77, 0x3f,
	0x31, 0x85, 0x1d, 0x93, 0x8d, 0xc6, 0x72, 0xaa, 0xd3, 0xb7, 0x0f, 0x27, 0x7b, 0x9e, 0x17, 0x73,
	0x6f, 0xa1, 0xa2, 0xee, 0x43, 0x27, 0xf0, 0xbd, 0xc9, 0xeb, 0x20, 0x3a, 0x78, 0x1f, 0xba, 0x82,
	0xc7, 0x65, 0x55, 0xa7, 0x05, 0xae, 0xb1, 0xd3, 0x5f, 0x42, 0x47, 0x07, 0xb7, 0xe4, 0x61, 0x3c,
	0x01, 0x18, 0x65, 0xbb, 0x7b, 0xab, 0x78, 0xd9, 0xcf, 0x39, 0x11, 0x4d, 0xd8, 0xfa, 0x50, 0x82,
	0x16, 0x7e, 0x2d, 0xbe, 0xfb, 0x6e, 0x76, 0x2a, 0x3d, 0xa8, 0x61, 0x00, 0x92, 0x5b, 0xa6, 0x45,
	0x53, 0xd2, 0x78, 0x0e, 0x1e, 0xb4, 0x35, 0x34, 0xb7, 0x9d, 0x13, 0xef, 0x81, 0x50, 0x6e, 0xff,
	0xc2, 0xc4, 0x90, 0xef, 0x39, 0x8e, 0xe0, 0x52, 0x7e, 0xac, 0x59, 0xe3, 0xd7, 0x92, 0x1a, 0xca,
	0x0a, 0xa6, 0x97, 0x74, 0x77, 0x1b, 0xba, 0x22, 0xaf, 0x02, 0x6d, 0x37, 0x68, 0x91, 0xad, 0x3c,
	0x3a, 0x65, 0x9e, 0xba, 0x9f, 0x11, 0x44, 0x85, 0xa6, 0xa4, 0xf5, 0x7b, 0x09, 0x9a, 0x47, 0x6c,
	0x72, 0x6b, 0x35, 0xb1, 0x5c, 0xf4, 0x9f, 0x42, 0x6b, 0x0a, 0x66, 0xc9, 0x29, 0x37, 0x82, 0xce,
	0xb1, 0x64, 0x43, 0x1e, 0xdf, 0xd1, 0x1f, 0x2b, 0x8e, 0xff, 0x94, 0xa1, 0x9b, 0x33, 0xbb, 0x64,
	0x0c, 0xa7, 0x2d, 0x61, 0xf5, 0xaa, 0x96, 0x50, 0x99, 0xd3, 0x12, 0xaa, 0x0b, 0x5a, 0xc2, 0xda,
	0x6c, 0x4b, 0x18, 0x40, 0x73, 0xac, 0x00, 0x9f, 0xc4, 0x66, 0x93, 0x29, 0x4a, 0x63, 0xa9, 0xfe,
	0x8e, 0x64, 0xaa, 0x24, 0x1e, 0xa4, 0x72, 0x3c, 0x75, 0xd7, 0x21, 0x7d, 0x9c, 0x41, 0x89, 0x5b,
	0x5a, 0x81, 0x4b, 0x1e, 0xc1, 0x3a, 0x72, 0xf6, 0x35, 0x50, 0x71, 0x8f, 0x9b, 0xe1, 0xeb, 0x0d,
	0xa7, 0x99, 0x6b, 0x38, 0xbb, 0xbf, 0x55, 0x60, 0xf3, 0x39, 0x96, 0x70, 0xfa, 0xd0, 0x53, 0xe3,
	0xb4, 0x9a, 0x31, 0x7f, 0x82, 0x96, 0xfe, 0x7a, 0x25, 0xf7, 0x4c, 0x35, 0x5f, 0x78, 0x0c, 0xf7,
	0xbf, 0x58, 0x2c, 0x24, 0x43, 0x6b, 0x85, 0xbc, 0x81, 0x7a, 0x6a, 0x8f, 0x7c, 0x6e, 0xda, 0xa3,
	0xbd, 0x82, 0xfb, 0x83, 0xf9, 0x02, 0xa8, 0x70, 0x04, 0x64, 0xf6, 0x3d, 0x47, 0x1e, 0x9a, 0x76,
	0x1a, 0x1f, 0xa5, 0xfd, 0x47, 0xd7, 0x15, 0x45, 0x73, 0x43, 0x58, 0x2f, 0xbe, 0xbe, 0xc8, 0x03,
	0x33, 0xcc, 0x99, 0xe7, 0x61, 0x7f, 0xfb, 0x7a, 0x82, 0xa9, 0xa1, 0xe2, 0xcb, 0xc9, 0x6c, 0xc8,
	0xf0, 0xb4, 0x33, 0x1b, 0x32, 0x3d, 0xc4, 0xac, 0x95, 0xdd, 0xbf, 0xab, 0x49, 0xb7, 0x4a, 0xe3,
	0x7f, 0x0c, 0x30, 0x7d, 0xf8, 0x10, 0xe3, 0xcb, 0x2c, 0xf7, 0x86, 0xea, 0x5b, 0x8b, 0x44, 0xd0,
	0xa1, 0x1f, 0xd5, 0xad, 0x98, 0x0d, 0xf2, 0xc4, 0x9a, 0x33, 0x54, 0x26, 0x7d, 0xb3, 0x7f, 0x6f,
	0xa1, 0x0c, 0x6a, 0x3e, 0x06, 0x98, 0x4e, 0x3d, 0x66, 0xc0, 0xb9, 0xb9, 0xdf, 0x0c, 0x38, 0x3f,
	0x38, 0xc5, 0x6a, 0xa7, 0xf3, 0x83, 0x59, 0x6d, 0x6e, 0xf8, 0x31, 0xab, 0xcd, 0x8f, 0x20, 0xd6,
	0x0a, 0xa1, 0xd0, 0xc8, 0xda, 0x31, 0x19, 0x5c, 0xd9, 0x4f, 0xd3, 0x33, 0xb8, 0xbb, 0x40, 0x02,
	0x75, 0x3a, 0xd0, 0x2d, 0x74, 0x3e, 0x72, 0xdf, 0x9c, 0x6b, 0xc5, 0xce, 0xdc, 0x7f, 0x70, 0x2d,
	0xb9, 0xb4, 0x76, 0xd3, 0x56, 0x62, 0xae, 0x5d, 0xad, 0xeb, 0x99, 0x6b, 0x57, 0xef, 0x44, 0x71,
	0x4a, 0x68, 0x17, 0xbd, 0x39, 0x25, 0xf2, 0x0d, 0xc8, 0x9c, 0x12, 0x85, 0x6e, 0x61, 0xad, 0x9c,
	0xae, 0xe1, 0x9f, 0xbc, 0xaf, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x06, 0x6a, 0xd0, 0x3e, 0xe2,
	0x13, 0x00, 0x00,
}
