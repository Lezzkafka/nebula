// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client_register.proto

/*
Package register_client_pb is a generated protocol buffer package.

It is generated from these files:
	client_register.proto

It has these top-level messages:
	GetPublicKeyReq
	GetPublicKeyResp
	RegisterReq
	RegisterResp
	VerifyContactEmailReq
	VerifyContactEmailResp
	ResendVerifyCodeReq
	ResendVerifyCodeResp
	GetTrackerServerReq
	GetTrackerServerResp
	TrackerServer
	AllPackageReq
	AllPackageResp
	Package
	PackageInfoReq
	PackageInfoResp
	BuyPackageReq
	Order
	BuyPackageResp
	MyAllOrderReq
	MyAllOrderResp
	OrderInfoReq
	OrderInfoResp
	CurrentOrderReq
	CurrentOrderResp
	UsageAmountReq
	UsageAmountResp
*/
package register_client_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetPublicKeyReq struct {
	Version uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *GetPublicKeyReq) Reset()                    { *m = GetPublicKeyReq{} }
func (m *GetPublicKeyReq) String() string            { return proto.CompactTextString(m) }
func (*GetPublicKeyReq) ProtoMessage()               {}
func (*GetPublicKeyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetPublicKeyReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type GetPublicKeyResp struct {
	PublicKey []byte `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
}

func (m *GetPublicKeyResp) Reset()                    { *m = GetPublicKeyResp{} }
func (m *GetPublicKeyResp) String() string            { return proto.CompactTextString(m) }
func (*GetPublicKeyResp) ProtoMessage()               {}
func (*GetPublicKeyResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetPublicKeyResp) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type RegisterReq struct {
	Version         uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId          []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	PublicKeyEnc    []byte `protobuf:"bytes,3,opt,name=publicKeyEnc,proto3" json:"publicKeyEnc,omitempty"`
	ContactEmailEnc []byte `protobuf:"bytes,4,opt,name=contactEmailEnc,proto3" json:"contactEmailEnc,omitempty"`
}

func (m *RegisterReq) Reset()                    { *m = RegisterReq{} }
func (m *RegisterReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterReq) ProtoMessage()               {}
func (*RegisterReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *RegisterReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RegisterReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *RegisterReq) GetPublicKeyEnc() []byte {
	if m != nil {
		return m.PublicKeyEnc
	}
	return nil
}

func (m *RegisterReq) GetContactEmailEnc() []byte {
	if m != nil {
		return m.ContactEmailEnc
	}
	return nil
}

type RegisterResp struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *RegisterResp) Reset()                    { *m = RegisterResp{} }
func (m *RegisterResp) String() string            { return proto.CompactTextString(m) }
func (*RegisterResp) ProtoMessage()               {}
func (*RegisterResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RegisterResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RegisterResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type VerifyContactEmailReq struct {
	Version    uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId     []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp  uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	VerifyCode string `protobuf:"bytes,4,opt,name=verifyCode" json:"verifyCode,omitempty"`
	Sign       []byte `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *VerifyContactEmailReq) Reset()                    { *m = VerifyContactEmailReq{} }
func (m *VerifyContactEmailReq) String() string            { return proto.CompactTextString(m) }
func (*VerifyContactEmailReq) ProtoMessage()               {}
func (*VerifyContactEmailReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *VerifyContactEmailReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *VerifyContactEmailReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *VerifyContactEmailReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *VerifyContactEmailReq) GetVerifyCode() string {
	if m != nil {
		return m.VerifyCode
	}
	return ""
}

func (m *VerifyContactEmailReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type VerifyContactEmailResp struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *VerifyContactEmailResp) Reset()                    { *m = VerifyContactEmailResp{} }
func (m *VerifyContactEmailResp) String() string            { return proto.CompactTextString(m) }
func (*VerifyContactEmailResp) ProtoMessage()               {}
func (*VerifyContactEmailResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *VerifyContactEmailResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *VerifyContactEmailResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type ResendVerifyCodeReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Sign      []byte `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *ResendVerifyCodeReq) Reset()                    { *m = ResendVerifyCodeReq{} }
func (m *ResendVerifyCodeReq) String() string            { return proto.CompactTextString(m) }
func (*ResendVerifyCodeReq) ProtoMessage()               {}
func (*ResendVerifyCodeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ResendVerifyCodeReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ResendVerifyCodeReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *ResendVerifyCodeReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ResendVerifyCodeReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type ResendVerifyCodeResp struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ResendVerifyCodeResp) Reset()                    { *m = ResendVerifyCodeResp{} }
func (m *ResendVerifyCodeResp) String() string            { return proto.CompactTextString(m) }
func (*ResendVerifyCodeResp) ProtoMessage()               {}
func (*ResendVerifyCodeResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ResendVerifyCodeResp) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type GetTrackerServerReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Sign      []byte `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *GetTrackerServerReq) Reset()                    { *m = GetTrackerServerReq{} }
func (m *GetTrackerServerReq) String() string            { return proto.CompactTextString(m) }
func (*GetTrackerServerReq) ProtoMessage()               {}
func (*GetTrackerServerReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetTrackerServerReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetTrackerServerReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *GetTrackerServerReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GetTrackerServerReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type GetTrackerServerResp struct {
	Server []*TrackerServer `protobuf:"bytes,1,rep,name=server" json:"server,omitempty"`
}

func (m *GetTrackerServerResp) Reset()                    { *m = GetTrackerServerResp{} }
func (m *GetTrackerServerResp) String() string            { return proto.CompactTextString(m) }
func (*GetTrackerServerResp) ProtoMessage()               {}
func (*GetTrackerServerResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetTrackerServerResp) GetServer() []*TrackerServer {
	if m != nil {
		return m.Server
	}
	return nil
}

type TrackerServer struct {
	Server string `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	Port   uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *TrackerServer) Reset()                    { *m = TrackerServer{} }
func (m *TrackerServer) String() string            { return proto.CompactTextString(m) }
func (*TrackerServer) ProtoMessage()               {}
func (*TrackerServer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TrackerServer) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *TrackerServer) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type AllPackageReq struct {
	Version uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *AllPackageReq) Reset()                    { *m = AllPackageReq{} }
func (m *AllPackageReq) String() string            { return proto.CompactTextString(m) }
func (*AllPackageReq) ProtoMessage()               {}
func (*AllPackageReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AllPackageReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type AllPackageResp struct {
	AllPackage []*Package `protobuf:"bytes,1,rep,name=allPackage" json:"allPackage,omitempty"`
}

func (m *AllPackageResp) Reset()                    { *m = AllPackageResp{} }
func (m *AllPackageResp) String() string            { return proto.CompactTextString(m) }
func (*AllPackageResp) ProtoMessage()               {}
func (*AllPackageResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AllPackageResp) GetAllPackage() []*Package {
	if m != nil {
		return m.AllPackage
	}
	return nil
}

type Package struct {
	Id          uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Level       int32  `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
	Price       uint32 `protobuf:"varint,4,opt,name=price" json:"price,omitempty"`
	Volume      uint32 `protobuf:"varint,5,opt,name=volume" json:"volume,omitempty"`
	Netflow     uint32 `protobuf:"varint,6,opt,name=netflow" json:"netflow,omitempty"`
	UpNetflow   uint32 `protobuf:"varint,7,opt,name=upNetflow" json:"upNetflow,omitempty"`
	DownNetflow uint32 `protobuf:"varint,8,opt,name=downNetflow" json:"downNetflow,omitempty"`
	ValidDays   uint32 `protobuf:"varint,9,opt,name=validDays" json:"validDays,omitempty"`
	Remark      string `protobuf:"bytes,10,opt,name=remark" json:"remark,omitempty"`
}

func (m *Package) Reset()                    { *m = Package{} }
func (m *Package) String() string            { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()               {}
func (*Package) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Package) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Package) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Package) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Package) GetPrice() uint32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Package) GetVolume() uint32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Package) GetNetflow() uint32 {
	if m != nil {
		return m.Netflow
	}
	return 0
}

func (m *Package) GetUpNetflow() uint32 {
	if m != nil {
		return m.UpNetflow
	}
	return 0
}

func (m *Package) GetDownNetflow() uint32 {
	if m != nil {
		return m.DownNetflow
	}
	return 0
}

func (m *Package) GetValidDays() uint32 {
	if m != nil {
		return m.ValidDays
	}
	return 0
}

func (m *Package) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

type PackageInfoReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	PackageId uint32 `protobuf:"varint,2,opt,name=packageId" json:"packageId,omitempty"`
}

func (m *PackageInfoReq) Reset()                    { *m = PackageInfoReq{} }
func (m *PackageInfoReq) String() string            { return proto.CompactTextString(m) }
func (*PackageInfoReq) ProtoMessage()               {}
func (*PackageInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PackageInfoReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PackageInfoReq) GetPackageId() uint32 {
	if m != nil {
		return m.PackageId
	}
	return 0
}

type PackageInfoResp struct {
	Package *Package `protobuf:"bytes,1,opt,name=package" json:"package,omitempty"`
}

func (m *PackageInfoResp) Reset()                    { *m = PackageInfoResp{} }
func (m *PackageInfoResp) String() string            { return proto.CompactTextString(m) }
func (*PackageInfoResp) ProtoMessage()               {}
func (*PackageInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PackageInfoResp) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

type BuyPackageReq struct {
	Version      uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId       []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp    uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	PackageId    uint32 `protobuf:"varint,4,opt,name=packageId" json:"packageId,omitempty"`
	Quanlity     uint32 `protobuf:"varint,5,opt,name=quanlity" json:"quanlity,omitempty"`
	CancelUnpaid bool   `protobuf:"varint,6,opt,name=cancelUnpaid" json:"cancelUnpaid,omitempty"`
	Sign         []byte `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *BuyPackageReq) Reset()                    { *m = BuyPackageReq{} }
func (m *BuyPackageReq) String() string            { return proto.CompactTextString(m) }
func (*BuyPackageReq) ProtoMessage()               {}
func (*BuyPackageReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *BuyPackageReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BuyPackageReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *BuyPackageReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BuyPackageReq) GetPackageId() uint32 {
	if m != nil {
		return m.PackageId
	}
	return 0
}

func (m *BuyPackageReq) GetQuanlity() uint32 {
	if m != nil {
		return m.Quanlity
	}
	return 0
}

func (m *BuyPackageReq) GetCancelUnpaid() bool {
	if m != nil {
		return m.CancelUnpaid
	}
	return false
}

func (m *BuyPackageReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type Order struct {
	Id            []byte   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Creation      uint64   `protobuf:"varint,2,opt,name=creation" json:"creation,omitempty"`
	PackageId     uint32   `protobuf:"varint,3,opt,name=packageId" json:"packageId,omitempty"`
	Package       *Package `protobuf:"bytes,4,opt,name=package" json:"package,omitempty"`
	Quanlity      uint32   `protobuf:"varint,5,opt,name=quanlity" json:"quanlity,omitempty"`
	TotalAmount   uint32   `protobuf:"varint,6,opt,name=totalAmount" json:"totalAmount,omitempty"`
	Upgraded      bool     `protobuf:"varint,7,opt,name=upgraded" json:"upgraded,omitempty"`
	Discount      float32  `protobuf:"fixed32,8,opt,name=discount" json:"discount,omitempty"`
	Volume        uint32   `protobuf:"varint,9,opt,name=volume" json:"volume,omitempty"`
	Netflow       uint32   `protobuf:"varint,10,opt,name=netflow" json:"netflow,omitempty"`
	UpNetflow     uint32   `protobuf:"varint,11,opt,name=upNetflow" json:"upNetflow,omitempty"`
	DownNetflow   uint32   `protobuf:"varint,12,opt,name=downNetflow" json:"downNetflow,omitempty"`
	ValidDays     uint32   `protobuf:"varint,13,opt,name=validDays" json:"validDays,omitempty"`
	StartTime     uint64   `protobuf:"varint,14,opt,name=startTime" json:"startTime,omitempty"`
	EndTime       uint64   `protobuf:"varint,15,opt,name=endTime" json:"endTime,omitempty"`
	PayTime       uint64   `protobuf:"varint,16,opt,name=payTime" json:"payTime,omitempty"`
	Height        uint64   `protobuf:"varint,17,opt,name=height" json:"height,omitempty"`
	TransactionId string   `protobuf:"bytes,18,opt,name=transactionId" json:"transactionId,omitempty"`
	Remark        string   `protobuf:"bytes,19,opt,name=remark" json:"remark,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Order) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Order) GetCreation() uint64 {
	if m != nil {
		return m.Creation
	}
	return 0
}

func (m *Order) GetPackageId() uint32 {
	if m != nil {
		return m.PackageId
	}
	return 0
}

func (m *Order) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

func (m *Order) GetQuanlity() uint32 {
	if m != nil {
		return m.Quanlity
	}
	return 0
}

func (m *Order) GetTotalAmount() uint32 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

func (m *Order) GetUpgraded() bool {
	if m != nil {
		return m.Upgraded
	}
	return false
}

func (m *Order) GetDiscount() float32 {
	if m != nil {
		return m.Discount
	}
	return 0
}

func (m *Order) GetVolume() uint32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Order) GetNetflow() uint32 {
	if m != nil {
		return m.Netflow
	}
	return 0
}

func (m *Order) GetUpNetflow() uint32 {
	if m != nil {
		return m.UpNetflow
	}
	return 0
}

func (m *Order) GetDownNetflow() uint32 {
	if m != nil {
		return m.DownNetflow
	}
	return 0
}

func (m *Order) GetValidDays() uint32 {
	if m != nil {
		return m.ValidDays
	}
	return 0
}

func (m *Order) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Order) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *Order) GetPayTime() uint64 {
	if m != nil {
		return m.PayTime
	}
	return 0
}

func (m *Order) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Order) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *Order) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

type BuyPackageResp struct {
	Order *Order `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
}

func (m *BuyPackageResp) Reset()                    { *m = BuyPackageResp{} }
func (m *BuyPackageResp) String() string            { return proto.CompactTextString(m) }
func (*BuyPackageResp) ProtoMessage()               {}
func (*BuyPackageResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BuyPackageResp) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type MyAllOrderReq struct {
	Version        uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId         []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp      uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	OnlyNotExpired bool   `protobuf:"varint,4,opt,name=onlyNotExpired" json:"onlyNotExpired,omitempty"`
	Sign           []byte `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *MyAllOrderReq) Reset()                    { *m = MyAllOrderReq{} }
func (m *MyAllOrderReq) String() string            { return proto.CompactTextString(m) }
func (*MyAllOrderReq) ProtoMessage()               {}
func (*MyAllOrderReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *MyAllOrderReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MyAllOrderReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *MyAllOrderReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MyAllOrderReq) GetOnlyNotExpired() bool {
	if m != nil {
		return m.OnlyNotExpired
	}
	return false
}

func (m *MyAllOrderReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type MyAllOrderResp struct {
	MyAllOrder []*Order `protobuf:"bytes,1,rep,name=myAllOrder" json:"myAllOrder,omitempty"`
}

func (m *MyAllOrderResp) Reset()                    { *m = MyAllOrderResp{} }
func (m *MyAllOrderResp) String() string            { return proto.CompactTextString(m) }
func (*MyAllOrderResp) ProtoMessage()               {}
func (*MyAllOrderResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *MyAllOrderResp) GetMyAllOrder() []*Order {
	if m != nil {
		return m.MyAllOrder
	}
	return nil
}

type OrderInfoReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	OrderId   []byte `protobuf:"bytes,4,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Sign      []byte `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *OrderInfoReq) Reset()                    { *m = OrderInfoReq{} }
func (m *OrderInfoReq) String() string            { return proto.CompactTextString(m) }
func (*OrderInfoReq) ProtoMessage()               {}
func (*OrderInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *OrderInfoReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *OrderInfoReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *OrderInfoReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *OrderInfoReq) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *OrderInfoReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type OrderInfoResp struct {
	Order *Order `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
}

func (m *OrderInfoResp) Reset()                    { *m = OrderInfoResp{} }
func (m *OrderInfoResp) String() string            { return proto.CompactTextString(m) }
func (*OrderInfoResp) ProtoMessage()               {}
func (*OrderInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *OrderInfoResp) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

type CurrentOrderReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Sign      []byte `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *CurrentOrderReq) Reset()                    { *m = CurrentOrderReq{} }
func (m *CurrentOrderReq) String() string            { return proto.CompactTextString(m) }
func (*CurrentOrderReq) ProtoMessage()               {}
func (*CurrentOrderReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CurrentOrderReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CurrentOrderReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *CurrentOrderReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CurrentOrderReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type CurrentOrderResp struct {
	Order   *Order   `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
	Package *Package `protobuf:"bytes,2,opt,name=package" json:"package,omitempty"`
}

func (m *CurrentOrderResp) Reset()                    { *m = CurrentOrderResp{} }
func (m *CurrentOrderResp) String() string            { return proto.CompactTextString(m) }
func (*CurrentOrderResp) ProtoMessage()               {}
func (*CurrentOrderResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CurrentOrderResp) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *CurrentOrderResp) GetPackage() *Package {
	if m != nil {
		return m.Package
	}
	return nil
}

type UsageAmountReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Sign      []byte `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *UsageAmountReq) Reset()                    { *m = UsageAmountReq{} }
func (m *UsageAmountReq) String() string            { return proto.CompactTextString(m) }
func (*UsageAmountReq) ProtoMessage()               {}
func (*UsageAmountReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *UsageAmountReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UsageAmountReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *UsageAmountReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UsageAmountReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type UsageAmountResp struct {
	Volume           uint32 `protobuf:"varint,1,opt,name=volume" json:"volume,omitempty"`
	Netflow          uint32 `protobuf:"varint,2,opt,name=netflow" json:"netflow,omitempty"`
	UpNetflow        uint32 `protobuf:"varint,3,opt,name=upNetflow" json:"upNetflow,omitempty"`
	DownNetflow      uint32 `protobuf:"varint,4,opt,name=downNetflow" json:"downNetflow,omitempty"`
	UsageVolume      uint32 `protobuf:"varint,5,opt,name=usageVolume" json:"usageVolume,omitempty"`
	UsageNetflow     uint32 `protobuf:"varint,6,opt,name=usageNetflow" json:"usageNetflow,omitempty"`
	UsageUpNetflow   uint32 `protobuf:"varint,7,opt,name=usageUpNetflow" json:"usageUpNetflow,omitempty"`
	UsageDownNetflow uint32 `protobuf:"varint,8,opt,name=usageDownNetflow" json:"usageDownNetflow,omitempty"`
}

func (m *UsageAmountResp) Reset()                    { *m = UsageAmountResp{} }
func (m *UsageAmountResp) String() string            { return proto.CompactTextString(m) }
func (*UsageAmountResp) ProtoMessage()               {}
func (*UsageAmountResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *UsageAmountResp) GetVolume() uint32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *UsageAmountResp) GetNetflow() uint32 {
	if m != nil {
		return m.Netflow
	}
	return 0
}

func (m *UsageAmountResp) GetUpNetflow() uint32 {
	if m != nil {
		return m.UpNetflow
	}
	return 0
}

func (m *UsageAmountResp) GetDownNetflow() uint32 {
	if m != nil {
		return m.DownNetflow
	}
	return 0
}

func (m *UsageAmountResp) GetUsageVolume() uint32 {
	if m != nil {
		return m.UsageVolume
	}
	return 0
}

func (m *UsageAmountResp) GetUsageNetflow() uint32 {
	if m != nil {
		return m.UsageNetflow
	}
	return 0
}

func (m *UsageAmountResp) GetUsageUpNetflow() uint32 {
	if m != nil {
		return m.UsageUpNetflow
	}
	return 0
}

func (m *UsageAmountResp) GetUsageDownNetflow() uint32 {
	if m != nil {
		return m.UsageDownNetflow
	}
	return 0
}

func init() {
	proto.RegisterType((*GetPublicKeyReq)(nil), "register.client.pb.GetPublicKeyReq")
	proto.RegisterType((*GetPublicKeyResp)(nil), "register.client.pb.GetPublicKeyResp")
	proto.RegisterType((*RegisterReq)(nil), "register.client.pb.RegisterReq")
	proto.RegisterType((*RegisterResp)(nil), "register.client.pb.RegisterResp")
	proto.RegisterType((*VerifyContactEmailReq)(nil), "register.client.pb.VerifyContactEmailReq")
	proto.RegisterType((*VerifyContactEmailResp)(nil), "register.client.pb.VerifyContactEmailResp")
	proto.RegisterType((*ResendVerifyCodeReq)(nil), "register.client.pb.ResendVerifyCodeReq")
	proto.RegisterType((*ResendVerifyCodeResp)(nil), "register.client.pb.ResendVerifyCodeResp")
	proto.RegisterType((*GetTrackerServerReq)(nil), "register.client.pb.GetTrackerServerReq")
	proto.RegisterType((*GetTrackerServerResp)(nil), "register.client.pb.GetTrackerServerResp")
	proto.RegisterType((*TrackerServer)(nil), "register.client.pb.TrackerServer")
	proto.RegisterType((*AllPackageReq)(nil), "register.client.pb.AllPackageReq")
	proto.RegisterType((*AllPackageResp)(nil), "register.client.pb.AllPackageResp")
	proto.RegisterType((*Package)(nil), "register.client.pb.Package")
	proto.RegisterType((*PackageInfoReq)(nil), "register.client.pb.PackageInfoReq")
	proto.RegisterType((*PackageInfoResp)(nil), "register.client.pb.PackageInfoResp")
	proto.RegisterType((*BuyPackageReq)(nil), "register.client.pb.BuyPackageReq")
	proto.RegisterType((*Order)(nil), "register.client.pb.Order")
	proto.RegisterType((*BuyPackageResp)(nil), "register.client.pb.BuyPackageResp")
	proto.RegisterType((*MyAllOrderReq)(nil), "register.client.pb.MyAllOrderReq")
	proto.RegisterType((*MyAllOrderResp)(nil), "register.client.pb.MyAllOrderResp")
	proto.RegisterType((*OrderInfoReq)(nil), "register.client.pb.OrderInfoReq")
	proto.RegisterType((*OrderInfoResp)(nil), "register.client.pb.OrderInfoResp")
	proto.RegisterType((*CurrentOrderReq)(nil), "register.client.pb.CurrentOrderReq")
	proto.RegisterType((*CurrentOrderResp)(nil), "register.client.pb.CurrentOrderResp")
	proto.RegisterType((*UsageAmountReq)(nil), "register.client.pb.UsageAmountReq")
	proto.RegisterType((*UsageAmountResp)(nil), "register.client.pb.UsageAmountResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClientRegisterService service

type ClientRegisterServiceClient interface {
	GetPublicKey(ctx context.Context, in *GetPublicKeyReq, opts ...grpc.CallOption) (*GetPublicKeyResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	VerifyContactEmail(ctx context.Context, in *VerifyContactEmailReq, opts ...grpc.CallOption) (*VerifyContactEmailResp, error)
	ResendVerifyCode(ctx context.Context, in *ResendVerifyCodeReq, opts ...grpc.CallOption) (*ResendVerifyCodeResp, error)
	GetTrackerServer(ctx context.Context, in *GetTrackerServerReq, opts ...grpc.CallOption) (*GetTrackerServerResp, error)
}

type clientRegisterServiceClient struct {
	cc *grpc.ClientConn
}

func NewClientRegisterServiceClient(cc *grpc.ClientConn) ClientRegisterServiceClient {
	return &clientRegisterServiceClient{cc}
}

func (c *clientRegisterServiceClient) GetPublicKey(ctx context.Context, in *GetPublicKeyReq, opts ...grpc.CallOption) (*GetPublicKeyResp, error) {
	out := new(GetPublicKeyResp)
	err := grpc.Invoke(ctx, "/register.client.pb.ClientRegisterService/GetPublicKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegisterServiceClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := grpc.Invoke(ctx, "/register.client.pb.ClientRegisterService/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegisterServiceClient) VerifyContactEmail(ctx context.Context, in *VerifyContactEmailReq, opts ...grpc.CallOption) (*VerifyContactEmailResp, error) {
	out := new(VerifyContactEmailResp)
	err := grpc.Invoke(ctx, "/register.client.pb.ClientRegisterService/VerifyContactEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegisterServiceClient) ResendVerifyCode(ctx context.Context, in *ResendVerifyCodeReq, opts ...grpc.CallOption) (*ResendVerifyCodeResp, error) {
	out := new(ResendVerifyCodeResp)
	err := grpc.Invoke(ctx, "/register.client.pb.ClientRegisterService/ResendVerifyCode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientRegisterServiceClient) GetTrackerServer(ctx context.Context, in *GetTrackerServerReq, opts ...grpc.CallOption) (*GetTrackerServerResp, error) {
	out := new(GetTrackerServerResp)
	err := grpc.Invoke(ctx, "/register.client.pb.ClientRegisterService/GetTrackerServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClientRegisterService service

type ClientRegisterServiceServer interface {
	GetPublicKey(context.Context, *GetPublicKeyReq) (*GetPublicKeyResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	VerifyContactEmail(context.Context, *VerifyContactEmailReq) (*VerifyContactEmailResp, error)
	ResendVerifyCode(context.Context, *ResendVerifyCodeReq) (*ResendVerifyCodeResp, error)
	GetTrackerServer(context.Context, *GetTrackerServerReq) (*GetTrackerServerResp, error)
}

func RegisterClientRegisterServiceServer(s *grpc.Server, srv ClientRegisterServiceServer) {
	s.RegisterService(&_ClientRegisterService_serviceDesc, srv)
}

func _ClientRegisterService_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegisterServiceServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.ClientRegisterService/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegisterServiceServer).GetPublicKey(ctx, req.(*GetPublicKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegisterService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegisterServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.ClientRegisterService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegisterServiceServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegisterService_VerifyContactEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyContactEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegisterServiceServer).VerifyContactEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.ClientRegisterService/VerifyContactEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegisterServiceServer).VerifyContactEmail(ctx, req.(*VerifyContactEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegisterService_ResendVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegisterServiceServer).ResendVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.ClientRegisterService/ResendVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegisterServiceServer).ResendVerifyCode(ctx, req.(*ResendVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientRegisterService_GetTrackerServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrackerServerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientRegisterServiceServer).GetTrackerServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.ClientRegisterService/GetTrackerServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientRegisterServiceServer).GetTrackerServer(ctx, req.(*GetTrackerServerReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientRegisterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "register.client.pb.ClientRegisterService",
	HandlerType: (*ClientRegisterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicKey",
			Handler:    _ClientRegisterService_GetPublicKey_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _ClientRegisterService_Register_Handler,
		},
		{
			MethodName: "VerifyContactEmail",
			Handler:    _ClientRegisterService_VerifyContactEmail_Handler,
		},
		{
			MethodName: "ResendVerifyCode",
			Handler:    _ClientRegisterService_ResendVerifyCode_Handler,
		},
		{
			MethodName: "GetTrackerServer",
			Handler:    _ClientRegisterService_GetTrackerServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_register.proto",
}

// Client API for OrderService service

type OrderServiceClient interface {
	AllPackage(ctx context.Context, in *AllPackageReq, opts ...grpc.CallOption) (*AllPackageResp, error)
	PackageInfo(ctx context.Context, in *PackageInfoReq, opts ...grpc.CallOption) (*PackageInfoResp, error)
	BuyPackage(ctx context.Context, in *BuyPackageReq, opts ...grpc.CallOption) (*BuyPackageResp, error)
	MyAllOrder(ctx context.Context, in *MyAllOrderReq, opts ...grpc.CallOption) (*MyAllOrderResp, error)
	OrderInfo(ctx context.Context, in *OrderInfoReq, opts ...grpc.CallOption) (*OrderInfoResp, error)
	UsageAmount(ctx context.Context, in *UsageAmountReq, opts ...grpc.CallOption) (*UsageAmountResp, error)
}

type orderServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrderServiceClient(cc *grpc.ClientConn) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) AllPackage(ctx context.Context, in *AllPackageReq, opts ...grpc.CallOption) (*AllPackageResp, error) {
	out := new(AllPackageResp)
	err := grpc.Invoke(ctx, "/register.client.pb.OrderService/AllPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) PackageInfo(ctx context.Context, in *PackageInfoReq, opts ...grpc.CallOption) (*PackageInfoResp, error) {
	out := new(PackageInfoResp)
	err := grpc.Invoke(ctx, "/register.client.pb.OrderService/PackageInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) BuyPackage(ctx context.Context, in *BuyPackageReq, opts ...grpc.CallOption) (*BuyPackageResp, error) {
	out := new(BuyPackageResp)
	err := grpc.Invoke(ctx, "/register.client.pb.OrderService/BuyPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) MyAllOrder(ctx context.Context, in *MyAllOrderReq, opts ...grpc.CallOption) (*MyAllOrderResp, error) {
	out := new(MyAllOrderResp)
	err := grpc.Invoke(ctx, "/register.client.pb.OrderService/MyAllOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) OrderInfo(ctx context.Context, in *OrderInfoReq, opts ...grpc.CallOption) (*OrderInfoResp, error) {
	out := new(OrderInfoResp)
	err := grpc.Invoke(ctx, "/register.client.pb.OrderService/OrderInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UsageAmount(ctx context.Context, in *UsageAmountReq, opts ...grpc.CallOption) (*UsageAmountResp, error) {
	out := new(UsageAmountResp)
	err := grpc.Invoke(ctx, "/register.client.pb.OrderService/UsageAmount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceServer interface {
	AllPackage(context.Context, *AllPackageReq) (*AllPackageResp, error)
	PackageInfo(context.Context, *PackageInfoReq) (*PackageInfoResp, error)
	BuyPackage(context.Context, *BuyPackageReq) (*BuyPackageResp, error)
	MyAllOrder(context.Context, *MyAllOrderReq) (*MyAllOrderResp, error)
	OrderInfo(context.Context, *OrderInfoReq) (*OrderInfoResp, error)
	UsageAmount(context.Context, *UsageAmountReq) (*UsageAmountResp, error)
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_AllPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllPackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AllPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.OrderService/AllPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AllPackage(ctx, req.(*AllPackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_PackageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).PackageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.OrderService/PackageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).PackageInfo(ctx, req.(*PackageInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_BuyPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyPackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).BuyPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.OrderService/BuyPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).BuyPackage(ctx, req.(*BuyPackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_MyAllOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyAllOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).MyAllOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.OrderService/MyAllOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).MyAllOrder(ctx, req.(*MyAllOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_OrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).OrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.OrderService/OrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).OrderInfo(ctx, req.(*OrderInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UsageAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsageAmountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UsageAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/register.client.pb.OrderService/UsageAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UsageAmount(ctx, req.(*UsageAmountReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "register.client.pb.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllPackage",
			Handler:    _OrderService_AllPackage_Handler,
		},
		{
			MethodName: "PackageInfo",
			Handler:    _OrderService_PackageInfo_Handler,
		},
		{
			MethodName: "BuyPackage",
			Handler:    _OrderService_BuyPackage_Handler,
		},
		{
			MethodName: "MyAllOrder",
			Handler:    _OrderService_MyAllOrder_Handler,
		},
		{
			MethodName: "OrderInfo",
			Handler:    _OrderService_OrderInfo_Handler,
		},
		{
			MethodName: "UsageAmount",
			Handler:    _OrderService_UsageAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_register.proto",
}

func init() { proto.RegisterFile("client_register.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xdd, 0x6e, 0xdb, 0xb6,
	0x17, 0x8f, 0x1d, 0x27, 0xb6, 0x8f, 0xbf, 0xf2, 0x67, 0x93, 0x42, 0x7f, 0x2f, 0xd8, 0x5c, 0xb5,
	0xd8, 0xd2, 0x0e, 0xc8, 0x8a, 0x0c, 0xbb, 0xd8, 0x7a, 0xb3, 0x2c, 0x09, 0xda, 0xa0, 0x48, 0xda,
	0x69, 0x4d, 0x30, 0x60, 0x17, 0x03, 0x23, 0x31, 0xae, 0x10, 0x59, 0x52, 0x49, 0xca, 0x9d, 0x77,
	0xb7, 0x9b, 0x5d, 0x6d, 0x4f, 0x50, 0xec, 0x35, 0xf6, 0x1e, 0x7b, 0xa3, 0x81, 0x14, 0x25, 0x53,
	0x32, 0x63, 0x27, 0x06, 0xb2, 0x3b, 0x9d, 0x0f, 0xf2, 0xfc, 0x0e, 0xcf, 0x07, 0x0f, 0x05, 0x5b,
	0x6e, 0xe0, 0x93, 0x90, 0xff, 0x4c, 0xc9, 0xd0, 0x67, 0x9c, 0xd0, 0xdd, 0x98, 0x46, 0x3c, 0x42,
	0x28, 0xa7, 0x53, 0xf9, 0x6e, 0x7c, 0x61, 0x7f, 0x0e, 0xbd, 0xe7, 0x84, 0xbf, 0x4e, 0x2e, 0x02,
	0xdf, 0x7d, 0x49, 0x26, 0x0e, 0x79, 0x87, 0x2c, 0xa8, 0x8f, 0x09, 0x65, 0x7e, 0x14, 0x5a, 0x95,
	0x41, 0x65, 0xa7, 0xe3, 0x64, 0xa4, 0xfd, 0x14, 0x36, 0x8a, 0xca, 0x2c, 0x46, 0xdb, 0xd0, 0x8c,
	0x33, 0x86, 0xd4, 0x6f, 0x3b, 0x53, 0x86, 0xfd, 0x67, 0x05, 0x5a, 0x8e, 0xb2, 0x3a, 0x77, 0x6f,
	0x74, 0x1f, 0xd6, 0xc3, 0xc8, 0x23, 0xc7, 0x9e, 0x55, 0x95, 0x9b, 0x28, 0x0a, 0xd9, 0xd0, 0xce,
	0xb7, 0x3b, 0x0a, 0x5d, 0x6b, 0x55, 0x4a, 0x0b, 0x3c, 0xb4, 0x03, 0x3d, 0x37, 0x0a, 0x39, 0x76,
	0xf9, 0xd1, 0x08, 0xfb, 0x81, 0x50, 0xab, 0x49, 0xb5, 0x32, 0xdb, 0xfe, 0x06, 0xda, 0x53, 0x38,
	0x2c, 0x46, 0x08, 0x6a, 0x6e, 0xe4, 0x11, 0x05, 0x46, 0x7e, 0x0b, 0x24, 0x84, 0xd2, 0x13, 0x36,
	0x94, 0x48, 0x9a, 0x8e, 0xa2, 0xec, 0x0f, 0x15, 0xd8, 0x3a, 0x27, 0xd4, 0xbf, 0x9c, 0x1c, 0x68,
	0xbb, 0x2e, 0xe7, 0xd5, 0x36, 0x34, 0xb9, 0x3f, 0x22, 0x8c, 0xe3, 0x51, 0x2c, 0x5d, 0xaa, 0x39,
	0x53, 0x06, 0xfa, 0x18, 0x60, 0xac, 0x0c, 0x79, 0x44, 0xba, 0xd2, 0x74, 0x34, 0x8e, 0x40, 0xcd,
	0xfc, 0x61, 0x68, 0xad, 0xc9, 0x3d, 0xe5, 0xb7, 0x7d, 0x08, 0xf7, 0x4d, 0xe0, 0x6e, 0xe9, 0xe3,
	0x04, 0xee, 0x39, 0x84, 0x91, 0xd0, 0x3b, 0xcf, 0xad, 0xdd, 0x85, 0x83, 0x99, 0x03, 0x35, 0xcd,
	0x81, 0xa7, 0xb0, 0x39, 0x6b, 0x9a, 0xc5, 0xc2, 0x36, 0x4b, 0x5c, 0x97, 0x30, 0x26, 0x6d, 0x37,
	0x9c, 0x8c, 0x14, 0x60, 0x9f, 0x13, 0xfe, 0x86, 0x62, 0xf7, 0x8a, 0xd0, 0x1f, 0x08, 0x1d, 0x2f,
	0x9b, 0x63, 0xb7, 0x07, 0xfb, 0x3d, 0x6c, 0xce, 0x9a, 0x66, 0x31, 0xfa, 0x1a, 0xd6, 0x99, 0xa4,
	0xac, 0xca, 0x60, 0x75, 0xa7, 0xb5, 0xf7, 0x60, 0x77, 0xb6, 0xe6, 0x76, 0x8b, 0xcb, 0xd4, 0x02,
	0xfb, 0x19, 0x74, 0x0a, 0x02, 0x81, 0x36, 0xdf, 0x4b, 0xc6, 0x28, 0xa5, 0x04, 0x9e, 0x38, 0xa2,
	0x5c, 0xfa, 0xd0, 0x71, 0xe4, 0xb7, 0xfd, 0x18, 0x3a, 0xfb, 0x41, 0xf0, 0x1a, 0xbb, 0x57, 0x78,
	0x38, 0x3f, 0x62, 0xf6, 0x09, 0x74, 0x75, 0x55, 0x16, 0xa3, 0x67, 0x00, 0x38, 0xe7, 0x28, 0xe0,
	0x1f, 0x99, 0x80, 0x67, 0x8b, 0x34, 0x75, 0xfb, 0xb7, 0x2a, 0xd4, 0xd5, 0x37, 0xea, 0x42, 0xd5,
	0xf7, 0x94, 0xbd, 0xaa, 0xef, 0x09, 0xa4, 0x21, 0x1e, 0x11, 0x95, 0x63, 0xf2, 0x1b, 0x6d, 0xc2,
	0x5a, 0x40, 0xc6, 0x24, 0x90, 0xe7, 0xbc, 0xe6, 0xa4, 0x84, 0xe0, 0xc6, 0xd4, 0x77, 0xd3, 0x64,
	0xef, 0x38, 0x29, 0x21, 0x4e, 0x60, 0x1c, 0x05, 0xc9, 0x88, 0xc8, 0x4c, 0xef, 0x38, 0x8a, 0x12,
	0xce, 0x85, 0x84, 0x5f, 0x06, 0xd1, 0x7b, 0x6b, 0x3d, 0x75, 0x4e, 0x91, 0x22, 0x92, 0x49, 0x7c,
	0xaa, 0x64, 0x75, 0x29, 0x9b, 0x32, 0xd0, 0x00, 0x5a, 0x5e, 0xf4, 0x3e, 0xcc, 0xe4, 0x0d, 0x29,
	0xd7, 0x59, 0x62, 0xfd, 0x18, 0x07, 0xbe, 0x77, 0x88, 0x27, 0xcc, 0x6a, 0xa6, 0xeb, 0x73, 0x86,
	0xc0, 0x43, 0xc9, 0x08, 0xd3, 0x2b, 0x0b, 0xd2, 0x88, 0xa4, 0x94, 0xfd, 0x02, 0xba, 0xea, 0x08,
	0x8e, 0xc3, 0xcb, 0x68, 0x7e, 0x0e, 0x8a, 0x7e, 0xa9, 0x74, 0x3d, 0x15, 0xc2, 0x29, 0xc3, 0x7e,
	0x01, 0xbd, 0xc2, 0x4e, 0x2c, 0x46, 0x5f, 0x41, 0x3d, 0xce, 0x43, 0x53, 0x59, 0x14, 0x9a, 0x4c,
	0xd7, 0xfe, 0xa7, 0x02, 0x9d, 0xef, 0x92, 0xc9, 0x4d, 0x52, 0x62, 0xc9, 0xba, 0x28, 0x78, 0x52,
	0x2b, 0x79, 0x82, 0xfa, 0xd0, 0x78, 0x97, 0xe0, 0x30, 0xf0, 0xf9, 0x44, 0x45, 0x2f, 0xa7, 0x45,
	0x4f, 0x77, 0x71, 0xe8, 0x92, 0xe0, 0x2c, 0x8c, 0xb1, 0xef, 0xc9, 0x20, 0x36, 0x9c, 0x02, 0x2f,
	0xaf, 0xba, 0xba, 0x56, 0x75, 0x7f, 0xd7, 0x60, 0xed, 0x15, 0xf5, 0x08, 0xd5, 0x32, 0xad, 0x2d,
	0x33, 0xad, 0x0f, 0x0d, 0x97, 0x12, 0xcc, 0x85, 0x73, 0x55, 0x09, 0x34, 0xa7, 0x8b, 0x38, 0x57,
	0xcb, 0x38, 0xb5, 0xe3, 0xad, 0xdd, 0xfc, 0x78, 0xe7, 0xba, 0x37, 0x80, 0x16, 0x8f, 0x38, 0x0e,
	0xf6, 0x47, 0x51, 0x12, 0x72, 0x95, 0xa2, 0x3a, 0x4b, 0xac, 0x4e, 0xe2, 0x21, 0xc5, 0x1e, 0xf1,
	0xa4, 0x83, 0x0d, 0x27, 0xa7, 0x85, 0xcc, 0xf3, 0x99, 0x2b, 0x97, 0x8a, 0x0c, 0xad, 0x3a, 0x39,
	0xad, 0x15, 0x44, 0xf3, 0xba, 0x82, 0x80, 0x39, 0x05, 0xd1, 0x5a, 0x50, 0x10, 0xed, 0x05, 0x05,
	0xd1, 0x29, 0x17, 0xc4, 0x36, 0x34, 0x19, 0xc7, 0x94, 0xbf, 0xf1, 0x47, 0xc4, 0xea, 0xa6, 0x09,
	0x92, 0x33, 0x04, 0x2a, 0x12, 0x7a, 0x52, 0xd6, 0x93, 0xb2, 0x8c, 0x14, 0x92, 0x18, 0x4f, 0xa4,
	0x64, 0x23, 0x95, 0x28, 0x52, 0x78, 0xf8, 0x96, 0xf8, 0xc3, 0xb7, 0xdc, 0xfa, 0x9f, 0x14, 0x28,
	0x0a, 0x3d, 0x82, 0x0e, 0xa7, 0x38, 0x64, 0xd8, 0x15, 0x31, 0x3d, 0xf6, 0x2c, 0x24, 0x2b, 0xb0,
	0xc8, 0xd4, 0x0a, 0xf4, 0x5e, 0xa1, 0x40, 0xf7, 0xa1, 0xab, 0xd7, 0x02, 0x8b, 0xd1, 0x17, 0xb0,
	0x16, 0x89, 0x4c, 0x52, 0x35, 0xf5, 0x7f, 0x53, 0xd0, 0x65, 0xaa, 0x39, 0xa9, 0x9e, 0xb8, 0xfd,
	0x3b, 0x27, 0x93, 0xfd, 0x20, 0x48, 0xb9, 0x77, 0x50, 0x4f, 0x9f, 0x42, 0x37, 0x0a, 0x83, 0xc9,
	0x69, 0xc4, 0x8f, 0x7e, 0x89, 0x7d, 0x4a, 0xd2, 0xa2, 0x6a, 0x38, 0x25, 0xae, 0xf1, 0xf6, 0x7f,
	0x09, 0x5d, 0x1d, 0x9c, 0xbc, 0x89, 0x60, 0x94, 0x73, 0x54, 0x53, 0x9f, 0xe3, 0xa5, 0xa6, 0x6c,
	0xff, 0x51, 0x81, 0xb6, 0xfc, 0x5a, 0xdc, 0xcd, 0x96, 0xf3, 0xd4, 0x82, 0xba, 0x3c, 0x54, 0xd5,
	0x37, 0xda, 0x4e, 0x46, 0x1a, 0x7d, 0xfb, 0x16, 0x3a, 0x1a, 0x9a, 0x65, 0x62, 0x97, 0x40, 0xef,
	0x20, 0xa1, 0x94, 0x84, 0xfc, 0xce, 0x82, 0x67, 0x1a, 0x12, 0x7e, 0x85, 0x8d, 0xa2, 0xd9, 0x25,
	0xb0, 0xeb, 0xfd, 0xa9, 0x7a, 0x8b, 0xf6, 0xcf, 0xa1, 0x7b, 0xc6, 0xf0, 0x90, 0xa4, 0x0d, 0xe7,
	0xbf, 0xf2, 0xf8, 0xaf, 0x2a, 0xf4, 0x0a, 0x66, 0x59, 0xac, 0xf5, 0xac, 0xca, 0x75, 0x3d, 0xab,
	0x3a, 0xa7, 0x67, 0xad, 0x2e, 0xe8, 0x59, 0xb5, 0xd9, 0x9e, 0x35, 0x80, 0x56, 0x22, 0x40, 0x9c,
	0xeb, 0xb3, 0x83, 0xce, 0x12, 0x17, 0x90, 0x24, 0x4f, 0x0b, 0x53, 0x44, 0x81, 0x27, 0xca, 0x51,
	0xd2, 0x67, 0xa5, 0x79, 0xa2, 0xc4, 0x45, 0x4f, 0x60, 0x43, 0x72, 0x0e, 0x67, 0x26, 0x8b, 0x19,
	0xfe, 0xde, 0xef, 0x35, 0xd8, 0x3a, 0x90, 0x41, 0xcb, 0x5e, 0x21, 0x62, 0xd6, 0x13, 0xa3, 0xce,
	0x4f, 0xd0, 0xd6, 0x9f, 0x56, 0xe8, 0xa1, 0x29, 0xca, 0xa5, 0x97, 0x5a, 0xff, 0xd1, 0x62, 0x25,
	0x16, 0xdb, 0x2b, 0xe8, 0x15, 0x34, 0x32, 0x7b, 0xe8, 0x13, 0xd3, 0x1a, 0xed, 0x89, 0xd6, 0x1f,
	0xcc, 0x57, 0x90, 0x1b, 0x8e, 0x00, 0xcd, 0x3e, 0x36, 0xd0, 0x63, 0xd3, 0x4a, 0xe3, 0x8b, 0xa9,
	0xff, 0xe4, 0xa6, 0xaa, 0xd2, 0xdc, 0x10, 0x36, 0xca, 0x4f, 0x03, 0xf4, 0x99, 0x19, 0xe6, 0xcc,
	0xdb, 0xa5, 0xbf, 0x73, 0x33, 0xc5, 0xcc, 0x50, 0x79, 0xac, 0x37, 0x1b, 0x32, 0xbc, 0x3b, 0xcc,
	0x86, 0x4c, 0xaf, 0x04, 0x7b, 0x65, 0xef, 0x43, 0x4d, 0xb5, 0xd8, 0x2c, 0xfe, 0x67, 0x00, 0xd3,
	0xa9, 0x1c, 0x19, 0x9f, 0x0d, 0x85, 0x01, 0xbf, 0x6f, 0x2f, 0x52, 0x91, 0x0e, 0xfd, 0x08, 0x2d,
	0x6d, 0x9e, 0x44, 0xf6, 0x9c, 0xde, 0xa1, 0x9a, 0x7d, 0xff, 0xe1, 0x42, 0x1d, 0xb9, 0xf3, 0x19,
	0xc0, 0xf4, 0x4a, 0x35, 0x03, 0x2e, 0x8c, 0x9f, 0x66, 0xc0, 0xc5, 0x5b, 0x39, 0xdd, 0x76, 0x7a,
	0x91, 0x99, 0xb7, 0x2d, 0xdc, 0xc2, 0xe6, 0x6d, 0x8b, 0x77, 0xa1, 0xbd, 0x82, 0x1c, 0x68, 0xe6,
	0x77, 0x08, 0x1a, 0x5c, 0xdb, 0x74, 0xb3, 0x33, 0x78, 0xb0, 0x40, 0x23, 0x3b, 0x5b, 0xad, 0xd7,
	0x99, 0xcf, 0xb6, 0xd8, 0x83, 0xcd, 0x67, 0x5b, 0x6a, 0x98, 0xf6, 0xca, 0xc5, 0xba, 0xfc, 0x5f,
	0xf3, 0xe5, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5e, 0xbf, 0xd6, 0x13, 0xc8, 0x11, 0x00, 0x00,
}
