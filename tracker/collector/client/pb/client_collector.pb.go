// Code generated by protoc-gen-go. DO NOT EDIT.
// source: client_collector.proto

/*
Package collector_client_pb is a generated protocol buffer package.

It is generated from these files:
	client_collector.proto

It has these top-level messages:
	CollectResp
	CollectReq
	ActionLog
*/
package collector_client_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CollectResp struct {
}

func (m *CollectResp) Reset()                    { *m = CollectResp{} }
func (m *CollectResp) String() string            { return proto.CompactTextString(m) }
func (*CollectResp) ProtoMessage()               {}
func (*CollectResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type CollectReq struct {
	NodeId    []byte       `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	ActionLog []*ActionLog `protobuf:"bytes,2,rep,name=actionLog" json:"actionLog,omitempty"`
}

func (m *CollectReq) Reset()                    { *m = CollectReq{} }
func (m *CollectReq) String() string            { return proto.CompactTextString(m) }
func (*CollectReq) ProtoMessage()               {}
func (*CollectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CollectReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *CollectReq) GetActionLog() []*ActionLog {
	if m != nil {
		return m.ActionLog
	}
	return nil
}

type ActionLog struct {
	Type           uint32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	OppositeNodeId []byte `protobuf:"bytes,2,opt,name=oppositeNodeId,proto3" json:"oppositeNodeId,omitempty"`
	Success        bool   `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
	FileHash       []byte `protobuf:"bytes,4,opt,name=fileHash,proto3" json:"fileHash,omitempty"`
	FileSize       uint64 `protobuf:"varint,5,opt,name=fileSize" json:"fileSize,omitempty"`
	BlockHash      []byte `protobuf:"bytes,6,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	BlockSize      uint32 `protobuf:"varint,7,opt,name=blockSize" json:"blockSize,omitempty"`
	BeginTime      uint64 `protobuf:"varint,8,opt,name=beginTime" json:"beginTime,omitempty"`
	EndTime        uint64 `protobuf:"varint,9,opt,name=endTime" json:"endTime,omitempty"`
	TransportSize  uint32 `protobuf:"varint,10,opt,name=transportSize" json:"transportSize,omitempty"`
	Info           string `protobuf:"bytes,11,opt,name=info" json:"info,omitempty"`
	Sign           []byte `protobuf:"bytes,12,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *ActionLog) Reset()                    { *m = ActionLog{} }
func (m *ActionLog) String() string            { return proto.CompactTextString(m) }
func (*ActionLog) ProtoMessage()               {}
func (*ActionLog) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ActionLog) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ActionLog) GetOppositeNodeId() []byte {
	if m != nil {
		return m.OppositeNodeId
	}
	return nil
}

func (m *ActionLog) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ActionLog) GetFileHash() []byte {
	if m != nil {
		return m.FileHash
	}
	return nil
}

func (m *ActionLog) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *ActionLog) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *ActionLog) GetBlockSize() uint32 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *ActionLog) GetBeginTime() uint64 {
	if m != nil {
		return m.BeginTime
	}
	return 0
}

func (m *ActionLog) GetEndTime() uint64 {
	if m != nil {
		return m.EndTime
	}
	return 0
}

func (m *ActionLog) GetTransportSize() uint32 {
	if m != nil {
		return m.TransportSize
	}
	return 0
}

func (m *ActionLog) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *ActionLog) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func init() {
	proto.RegisterType((*CollectResp)(nil), "collector.client.pb.CollectResp")
	proto.RegisterType((*CollectReq)(nil), "collector.client.pb.CollectReq")
	proto.RegisterType((*ActionLog)(nil), "collector.client.pb.ActionLog")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClientCollectorService service

type ClientCollectorServiceClient interface {
	Collect(ctx context.Context, opts ...grpc.CallOption) (ClientCollectorService_CollectClient, error)
}

type clientCollectorServiceClient struct {
	cc *grpc.ClientConn
}

func NewClientCollectorServiceClient(cc *grpc.ClientConn) ClientCollectorServiceClient {
	return &clientCollectorServiceClient{cc}
}

func (c *clientCollectorServiceClient) Collect(ctx context.Context, opts ...grpc.CallOption) (ClientCollectorService_CollectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClientCollectorService_serviceDesc.Streams[0], c.cc, "/collector.client.pb.ClientCollectorService/Collect", opts...)
	if err != nil {
		return nil, err
	}
	x := &clientCollectorServiceCollectClient{stream}
	return x, nil
}

type ClientCollectorService_CollectClient interface {
	Send(*CollectReq) error
	CloseAndRecv() (*CollectResp, error)
	grpc.ClientStream
}

type clientCollectorServiceCollectClient struct {
	grpc.ClientStream
}

func (x *clientCollectorServiceCollectClient) Send(m *CollectReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clientCollectorServiceCollectClient) CloseAndRecv() (*CollectResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CollectResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ClientCollectorService service

type ClientCollectorServiceServer interface {
	Collect(ClientCollectorService_CollectServer) error
}

func RegisterClientCollectorServiceServer(s *grpc.Server, srv ClientCollectorServiceServer) {
	s.RegisterService(&_ClientCollectorService_serviceDesc, srv)
}

func _ClientCollectorService_Collect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClientCollectorServiceServer).Collect(&clientCollectorServiceCollectServer{stream})
}

type ClientCollectorService_CollectServer interface {
	SendAndClose(*CollectResp) error
	Recv() (*CollectReq, error)
	grpc.ServerStream
}

type clientCollectorServiceCollectServer struct {
	grpc.ServerStream
}

func (x *clientCollectorServiceCollectServer) SendAndClose(m *CollectResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clientCollectorServiceCollectServer) Recv() (*CollectReq, error) {
	m := new(CollectReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ClientCollectorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "collector.client.pb.ClientCollectorService",
	HandlerType: (*ClientCollectorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Collect",
			Handler:       _ClientCollectorService_Collect_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "client_collector.proto",
}

func init() { proto.RegisterFile("client_collector.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x4f, 0x4b, 0x33, 0x31,
	0x10, 0xc6, 0xdf, 0x6d, 0xfb, 0xb6, 0xdd, 0x69, 0xeb, 0x21, 0x42, 0x09, 0x45, 0x74, 0x59, 0x44,
	0xf6, 0xb4, 0x87, 0x7a, 0xf5, 0x22, 0xbd, 0x28, 0x88, 0x48, 0xea, 0x5d, 0xba, 0xe9, 0xb4, 0x46,
	0xd7, 0x24, 0x6e, 0xa2, 0xa0, 0x5f, 0xd5, 0x2f, 0x23, 0x9d, 0x76, 0x37, 0x28, 0xc5, 0xdb, 0x3c,
	0xbf, 0x67, 0xfe, 0x91, 0x09, 0x8c, 0x65, 0xa9, 0x50, 0xfb, 0x07, 0x69, 0xca, 0x12, 0xa5, 0x37,
	0x55, 0x6e, 0x2b, 0xe3, 0x0d, 0x3b, 0x0c, 0x60, 0x9b, 0x91, 0xdb, 0x22, 0x1d, 0xc1, 0x60, 0xb6,
	0xc5, 0x02, 0x9d, 0x4d, 0x0b, 0x80, 0x46, 0xbe, 0xb2, 0x31, 0x74, 0xb5, 0x59, 0xe2, 0xf5, 0x92,
	0x47, 0x49, 0x94, 0x0d, 0xc5, 0x4e, 0xb1, 0x0b, 0x88, 0x17, 0xd2, 0x2b, 0xa3, 0x6f, 0xcc, 0x9a,
	0xb7, 0x92, 0x76, 0x36, 0x98, 0x1e, 0xe7, 0x7b, 0xba, 0xe7, 0x97, 0x75, 0x96, 0x08, 0x05, 0xe9,
	0x57, 0x0b, 0xe2, 0xc6, 0x60, 0x0c, 0x3a, 0xfe, 0xc3, 0x22, 0x4d, 0x18, 0x09, 0x8a, 0xd9, 0x19,
	0x1c, 0x18, 0x6b, 0x8d, 0x53, 0x1e, 0x6f, 0xb7, 0xf3, 0x5b, 0x34, 0xff, 0x17, 0x65, 0x1c, 0x7a,
	0xee, 0x4d, 0x4a, 0x74, 0x8e, 0xb7, 0x93, 0x28, 0xeb, 0x8b, 0x5a, 0xb2, 0x09, 0xf4, 0x57, 0xaa,
	0xc4, 0xab, 0x85, 0x7b, 0xe4, 0x1d, 0xaa, 0x6d, 0x74, 0xed, 0xcd, 0xd5, 0x27, 0xf2, 0xff, 0x49,
	0x94, 0x75, 0x44, 0xa3, 0xd9, 0x11, 0xc4, 0x45, 0x69, 0xe4, 0x33, 0x15, 0x76, 0xa9, 0x30, 0x80,
	0xc6, 0xa5, 0xd2, 0x1e, 0x2d, 0x1c, 0x00, 0xb9, 0xb8, 0x56, 0xfa, 0x5e, 0xbd, 0x20, 0xef, 0x53,
	0xe3, 0x00, 0x36, 0xbb, 0xa2, 0x5e, 0x92, 0x17, 0x93, 0x57, 0x4b, 0x76, 0x0a, 0x23, 0x5f, 0x2d,
	0xb4, 0xb3, 0xa6, 0xf2, 0xd4, 0x19, 0xa8, 0xf3, 0x4f, 0xb8, 0x79, 0x27, 0xa5, 0x57, 0x86, 0x0f,
	0x92, 0x28, 0x8b, 0x05, 0xc5, 0x1b, 0xe6, 0xd4, 0x5a, 0xf3, 0x21, 0x2d, 0x4a, 0xf1, 0xf4, 0x09,
	0xc6, 0x33, 0x7a, 0xff, 0x59, 0x7d, 0x8f, 0x39, 0x56, 0xef, 0x4a, 0x22, 0xbb, 0x83, 0xde, 0x8e,
	0xb1, 0x93, 0xbd, 0xd7, 0x0a, 0x97, 0x9f, 0x24, 0x7f, 0x27, 0x38, 0x9b, 0xfe, 0xcb, 0xa2, 0xa2,
	0x4b, 0x1f, 0xeb, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x5d, 0x17, 0x0a, 0x72, 0x02, 0x00,
	0x00,
}
