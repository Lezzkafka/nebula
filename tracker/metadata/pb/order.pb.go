// Code generated by protoc-gen-go. DO NOT EDIT.
// source: order.proto

/*
Package metadata_pb is a generated protocol buffer package.

It is generated from these files:
	order.proto

It has these top-level messages:
	AllPackageReq
	AllPackageResp
	Package
	BuyPackageReq
	BuyPackageResp
	CurrentPackageReq
	CurrentPackageResp
*/
package metadata_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AllPackageReq struct {
	Version uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *AllPackageReq) Reset()                    { *m = AllPackageReq{} }
func (m *AllPackageReq) String() string            { return proto.CompactTextString(m) }
func (*AllPackageReq) ProtoMessage()               {}
func (*AllPackageReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AllPackageReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type AllPackageResp struct {
	AllPackage []*Package `protobuf:"bytes,1,rep,name=allPackage" json:"allPackage,omitempty"`
}

func (m *AllPackageResp) Reset()                    { *m = AllPackageResp{} }
func (m *AllPackageResp) String() string            { return proto.CompactTextString(m) }
func (*AllPackageResp) ProtoMessage()               {}
func (*AllPackageResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AllPackageResp) GetAllPackage() []*Package {
	if m != nil {
		return m.AllPackage
	}
	return nil
}

type Package struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Price       uint32 `protobuf:"varint,3,opt,name=price" json:"price,omitempty"`
	Volume      uint32 `protobuf:"varint,4,opt,name=volume" json:"volume,omitempty"`
	Netflow     uint32 `protobuf:"varint,5,opt,name=netflow" json:"netflow,omitempty"`
	UpNetflow   uint32 `protobuf:"varint,6,opt,name=upNetflow" json:"upNetflow,omitempty"`
	DownNetflow uint32 `protobuf:"varint,7,opt,name=downNetflow" json:"downNetflow,omitempty"`
	ValidDays   uint32 `protobuf:"varint,8,opt,name=validDays" json:"validDays,omitempty"`
	Remark      string `protobuf:"bytes,9,opt,name=remark" json:"remark,omitempty"`
}

func (m *Package) Reset()                    { *m = Package{} }
func (m *Package) String() string            { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()               {}
func (*Package) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Package) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Package) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Package) GetPrice() uint32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Package) GetVolume() uint32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *Package) GetNetflow() uint32 {
	if m != nil {
		return m.Netflow
	}
	return 0
}

func (m *Package) GetUpNetflow() uint32 {
	if m != nil {
		return m.UpNetflow
	}
	return 0
}

func (m *Package) GetDownNetflow() uint32 {
	if m != nil {
		return m.DownNetflow
	}
	return 0
}

func (m *Package) GetValidDays() uint32 {
	if m != nil {
		return m.ValidDays
	}
	return 0
}

func (m *Package) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

type BuyPackageReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	PackageId uint64 `protobuf:"varint,2,opt,name=packageId" json:"packageId,omitempty"`
	Quanlity  uint32 `protobuf:"varint,3,opt,name=quanlity" json:"quanlity,omitempty"`
}

func (m *BuyPackageReq) Reset()                    { *m = BuyPackageReq{} }
func (m *BuyPackageReq) String() string            { return proto.CompactTextString(m) }
func (*BuyPackageReq) ProtoMessage()               {}
func (*BuyPackageReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BuyPackageReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BuyPackageReq) GetPackageId() uint64 {
	if m != nil {
		return m.PackageId
	}
	return 0
}

func (m *BuyPackageReq) GetQuanlity() uint32 {
	if m != nil {
		return m.Quanlity
	}
	return 0
}

type BuyPackageResp struct {
	OrderId    []byte `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	TotalAmout uint32 `protobuf:"varint,2,opt,name=totalAmout" json:"totalAmout,omitempty"`
	PayAdress  string `protobuf:"bytes,3,opt,name=payAdress" json:"payAdress,omitempty"`
}

func (m *BuyPackageResp) Reset()                    { *m = BuyPackageResp{} }
func (m *BuyPackageResp) String() string            { return proto.CompactTextString(m) }
func (*BuyPackageResp) ProtoMessage()               {}
func (*BuyPackageResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BuyPackageResp) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *BuyPackageResp) GetTotalAmout() uint32 {
	if m != nil {
		return m.TotalAmout
	}
	return 0
}

func (m *BuyPackageResp) GetPayAdress() string {
	if m != nil {
		return m.PayAdress
	}
	return ""
}

type CurrentPackageReq struct {
	Version uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (m *CurrentPackageReq) Reset()                    { *m = CurrentPackageReq{} }
func (m *CurrentPackageReq) String() string            { return proto.CompactTextString(m) }
func (*CurrentPackageReq) ProtoMessage()               {}
func (*CurrentPackageReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CurrentPackageReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

type CurrentPackageResp struct {
	PackageId   uint64 `protobuf:"varint,1,opt,name=packageId" json:"packageId,omitempty"`
	OrderId     []byte `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	PayTime     uint64 `protobuf:"varint,3,opt,name=payTime" json:"payTime,omitempty"`
	Volume      uint32 `protobuf:"varint,4,opt,name=volume" json:"volume,omitempty"`
	Netflow     uint32 `protobuf:"varint,5,opt,name=netflow" json:"netflow,omitempty"`
	UpNetflow   uint32 `protobuf:"varint,6,opt,name=upNetflow" json:"upNetflow,omitempty"`
	DownNetflow uint32 `protobuf:"varint,7,opt,name=downNetflow" json:"downNetflow,omitempty"`
	ExpiredTime uint64 `protobuf:"varint,8,opt,name=expiredTime" json:"expiredTime,omitempty"`
}

func (m *CurrentPackageResp) Reset()                    { *m = CurrentPackageResp{} }
func (m *CurrentPackageResp) String() string            { return proto.CompactTextString(m) }
func (*CurrentPackageResp) ProtoMessage()               {}
func (*CurrentPackageResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *CurrentPackageResp) GetPackageId() uint64 {
	if m != nil {
		return m.PackageId
	}
	return 0
}

func (m *CurrentPackageResp) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *CurrentPackageResp) GetPayTime() uint64 {
	if m != nil {
		return m.PayTime
	}
	return 0
}

func (m *CurrentPackageResp) GetVolume() uint32 {
	if m != nil {
		return m.Volume
	}
	return 0
}

func (m *CurrentPackageResp) GetNetflow() uint32 {
	if m != nil {
		return m.Netflow
	}
	return 0
}

func (m *CurrentPackageResp) GetUpNetflow() uint32 {
	if m != nil {
		return m.UpNetflow
	}
	return 0
}

func (m *CurrentPackageResp) GetDownNetflow() uint32 {
	if m != nil {
		return m.DownNetflow
	}
	return 0
}

func (m *CurrentPackageResp) GetExpiredTime() uint64 {
	if m != nil {
		return m.ExpiredTime
	}
	return 0
}

func init() {
	proto.RegisterType((*AllPackageReq)(nil), "metadata.pb.AllPackageReq")
	proto.RegisterType((*AllPackageResp)(nil), "metadata.pb.AllPackageResp")
	proto.RegisterType((*Package)(nil), "metadata.pb.Package")
	proto.RegisterType((*BuyPackageReq)(nil), "metadata.pb.BuyPackageReq")
	proto.RegisterType((*BuyPackageResp)(nil), "metadata.pb.BuyPackageResp")
	proto.RegisterType((*CurrentPackageReq)(nil), "metadata.pb.CurrentPackageReq")
	proto.RegisterType((*CurrentPackageResp)(nil), "metadata.pb.CurrentPackageResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OrderService service

type OrderServiceClient interface {
	AllPackage(ctx context.Context, in *AllPackageReq, opts ...grpc.CallOption) (*AllPackageResp, error)
	BuyPackage(ctx context.Context, in *BuyPackageReq, opts ...grpc.CallOption) (*BuyPackageResp, error)
	CurrentPackage(ctx context.Context, in *CurrentPackageReq, opts ...grpc.CallOption) (*CurrentPackageResp, error)
}

type orderServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrderServiceClient(cc *grpc.ClientConn) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) AllPackage(ctx context.Context, in *AllPackageReq, opts ...grpc.CallOption) (*AllPackageResp, error) {
	out := new(AllPackageResp)
	err := grpc.Invoke(ctx, "/metadata.pb.OrderService/AllPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) BuyPackage(ctx context.Context, in *BuyPackageReq, opts ...grpc.CallOption) (*BuyPackageResp, error) {
	out := new(BuyPackageResp)
	err := grpc.Invoke(ctx, "/metadata.pb.OrderService/BuyPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CurrentPackage(ctx context.Context, in *CurrentPackageReq, opts ...grpc.CallOption) (*CurrentPackageResp, error) {
	out := new(CurrentPackageResp)
	err := grpc.Invoke(ctx, "/metadata.pb.OrderService/CurrentPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceServer interface {
	AllPackage(context.Context, *AllPackageReq) (*AllPackageResp, error)
	BuyPackage(context.Context, *BuyPackageReq) (*BuyPackageResp, error)
	CurrentPackage(context.Context, *CurrentPackageReq) (*CurrentPackageResp, error)
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_AllPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllPackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).AllPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pb.OrderService/AllPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).AllPackage(ctx, req.(*AllPackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_BuyPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyPackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).BuyPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pb.OrderService/BuyPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).BuyPackage(ctx, req.(*BuyPackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CurrentPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentPackageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CurrentPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pb.OrderService/CurrentPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CurrentPackage(ctx, req.(*CurrentPackageReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metadata.pb.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllPackage",
			Handler:    _OrderService_AllPackage_Handler,
		},
		{
			MethodName: "BuyPackage",
			Handler:    _OrderService_BuyPackage_Handler,
		},
		{
			MethodName: "CurrentPackage",
			Handler:    _OrderService_CurrentPackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order.proto",
}

func init() { proto.RegisterFile("order.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x54, 0x4d, 0x6f, 0xd4, 0x30,
	0x10, 0x6d, 0xb6, 0xe9, 0x7e, 0x4c, 0xba, 0x2b, 0x31, 0xaa, 0x90, 0xb5, 0xa0, 0x12, 0xe5, 0xb4,
	0x1c, 0xd8, 0x43, 0xe1, 0x0f, 0x2c, 0x20, 0x50, 0x2f, 0x80, 0x5c, 0xfe, 0x80, 0xbb, 0x36, 0x10,
	0x35, 0x89, 0x5d, 0xc7, 0xd9, 0x92, 0xdf, 0xcc, 0x99, 0x0b, 0x27, 0x64, 0x27, 0xd9, 0xc4, 0x8b,
	0x40, 0x7b, 0xe3, 0x96, 0xf7, 0x66, 0x3c, 0xf3, 0x3c, 0xf3, 0x1c, 0x88, 0xa4, 0xe6, 0x42, 0xaf,
	0x95, 0x96, 0x46, 0x62, 0x94, 0x0b, 0xc3, 0x38, 0x33, 0x6c, 0xad, 0x6e, 0x93, 0xe7, 0x30, 0xdf,
	0x64, 0xd9, 0x27, 0xb6, 0xbd, 0x63, 0x5f, 0x05, 0x15, 0xf7, 0x48, 0x60, 0xb2, 0x13, 0xba, 0x4c,
	0x65, 0x41, 0x82, 0x38, 0x58, 0xcd, 0x69, 0x07, 0x93, 0x77, 0xb0, 0x18, 0xa6, 0x96, 0x0a, 0x5f,
	0x01, 0xb0, 0x3d, 0x43, 0x82, 0xf8, 0x74, 0x15, 0x5d, 0x5d, 0xac, 0x07, 0xe5, 0xd7, 0x5d, 0xf6,
	0x20, 0x2f, 0xf9, 0x11, 0xc0, 0xa4, 0xfd, 0xc6, 0x05, 0x8c, 0x52, 0xee, 0x1a, 0x85, 0x74, 0x94,
	0x72, 0x44, 0x08, 0x0b, 0x96, 0x0b, 0x32, 0x8a, 0x83, 0xd5, 0x8c, 0xba, 0x6f, 0xbc, 0x80, 0x33,
	0xa5, 0xd3, 0xad, 0x20, 0xa7, 0x4e, 0x4f, 0x03, 0xf0, 0x31, 0x8c, 0x77, 0x32, 0xab, 0x72, 0x41,
	0x42, 0x47, 0xb7, 0xc8, 0xea, 0x2f, 0x84, 0xf9, 0x92, 0xc9, 0x07, 0x72, 0xd6, 0xe8, 0x6f, 0x21,
	0x3e, 0x85, 0x59, 0xa5, 0x3e, 0xb4, 0xb1, 0xb1, 0x8b, 0xf5, 0x04, 0xc6, 0x10, 0x71, 0xf9, 0x50,
	0x74, 0xf1, 0x89, 0x8b, 0x0f, 0x29, 0x7b, 0x7e, 0xc7, 0xb2, 0x94, 0xbf, 0x65, 0x75, 0x49, 0xa6,
	0xcd, 0xf9, 0x3d, 0x61, 0xf5, 0x68, 0x91, 0x33, 0x7d, 0x47, 0x66, 0x4e, 0x7b, 0x8b, 0x92, 0x2d,
	0xcc, 0x5f, 0x57, 0xf5, 0x31, 0x03, 0xb6, 0x0d, 0x54, 0x93, 0x77, 0xcd, 0xdd, 0x04, 0x42, 0xda,
	0x13, 0xb8, 0x84, 0xe9, 0x7d, 0xc5, 0x8a, 0x2c, 0x35, 0x75, 0x3b, 0x89, 0x3d, 0x4e, 0xbe, 0xc1,
	0x62, 0xd8, 0xa4, 0x54, 0xb6, 0x8b, 0xdb, 0xf9, 0x75, 0x33, 0xdd, 0x73, 0xda, 0x41, 0xbc, 0x04,
	0x30, 0xd2, 0xb0, 0x6c, 0x93, 0xcb, 0xca, 0xb8, 0x36, 0x73, 0x3a, 0x60, 0x1a, 0x15, 0xf5, 0x86,
	0x6b, 0x51, 0x96, 0xae, 0xd1, 0x8c, 0xf6, 0x44, 0xf2, 0x02, 0x1e, 0xbd, 0xa9, 0xb4, 0x16, 0x85,
	0x39, 0xca, 0x33, 0xbf, 0x02, 0xc0, 0xc3, 0xfc, 0x52, 0xf9, 0x37, 0x0d, 0x0e, 0x6f, 0x3a, 0xd0,
	0x3e, 0xf2, 0xb5, 0x13, 0x98, 0x28, 0x56, 0x7f, 0x4e, 0xf3, 0xc6, 0x0c, 0x21, 0xed, 0xe0, 0x7f,
	0xb0, 0x43, 0x0c, 0x91, 0xf8, 0xae, 0x52, 0x2d, 0xb8, 0xd3, 0x33, 0x75, 0x7a, 0x86, 0xd4, 0xd5,
	0xcf, 0x00, 0xce, 0x3f, 0x5a, 0xe5, 0x37, 0x42, 0xef, 0xac, 0x67, 0xdf, 0x03, 0xf4, 0x2f, 0x08,
	0x97, 0xde, 0x4b, 0xf1, 0x5e, 0xe1, 0xf2, 0xc9, 0x5f, 0x63, 0xa5, 0x4a, 0x4e, 0x6c, 0xa1, 0x7e,
	0xdf, 0x07, 0x85, 0x3c, 0xb7, 0x1d, 0x14, 0xf2, 0x4d, 0x92, 0x9c, 0xe0, 0x0d, 0x2c, 0xfc, 0xf5,
	0xe0, 0xa5, 0x77, 0xe0, 0x8f, 0x5d, 0x2f, 0x9f, 0xfd, 0x33, 0x6e, 0x8b, 0xde, 0x8e, 0xdd, 0x7f,
	0xe6, 0xe5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38, 0x44, 0x41, 0xae, 0x76, 0x04, 0x00, 0x00,
}
