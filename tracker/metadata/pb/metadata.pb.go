// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metadata.proto

/*
Package metadata_pb is a generated protocol buffer package.

It is generated from these files:
	metadata.proto

It has these top-level messages:
	MkFolderReq
	MkFolderResp
	CheckFileExistReq
	CheckFileExistResp
	ReplicaProvider
	UploadFilePrepareReq
	PieceHashAndSize
	UploadFilePrepareResp
	ErasureCodeProvider
	PieceHashAuth
	UploadFileDoneReq
	Partition
	Block
	UploadFileDoneResp
	ListFilesReq
	ListFilesResp
	FileOrFolder
	RetrieveFileReq
	RetrieveFileResp
	RemoveReq
	RemoveResp
*/
package metadata_pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FileStoreType int32

const (
	FileStoreType_ErasureCode  FileStoreType = 0
	FileStoreType_MultiReplica FileStoreType = 1
)

var FileStoreType_name = map[int32]string{
	0: "ErasureCode",
	1: "MultiReplica",
}
var FileStoreType_value = map[string]int32{
	"ErasureCode":  0,
	"MultiReplica": 1,
}

func (x FileStoreType) String() string {
	return proto.EnumName(FileStoreType_name, int32(x))
}
func (FileStoreType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SortType int32

const (
	SortType_Name    SortType = 0
	SortType_ModTime SortType = 1
	SortType_Size    SortType = 2
)

var SortType_name = map[int32]string{
	0: "Name",
	1: "ModTime",
	2: "Size",
}
var SortType_value = map[string]int32{
	"Name":    0,
	"ModTime": 1,
	"Size":    2,
}

func (x SortType) String() string {
	return proto.EnumName(SortType_name, int32(x))
}
func (SortType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MkFolderReq struct {
	Version   uint32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte   `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64   `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Path      string   `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	Folder    []string `protobuf:"bytes,5,rep,name=folder" json:"folder,omitempty"`
	Sign      []byte   `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *MkFolderReq) Reset()                    { *m = MkFolderReq{} }
func (m *MkFolderReq) String() string            { return proto.CompactTextString(m) }
func (*MkFolderReq) ProtoMessage()               {}
func (*MkFolderReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MkFolderReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *MkFolderReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *MkFolderReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MkFolderReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *MkFolderReq) GetFolder() []string {
	if m != nil {
		return m.Folder
	}
	return nil
}

func (m *MkFolderReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type MkFolderResp struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *MkFolderResp) Reset()                    { *m = MkFolderResp{} }
func (m *MkFolderResp) String() string            { return proto.CompactTextString(m) }
func (*MkFolderResp) ProtoMessage()               {}
func (*MkFolderResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MkFolderResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MkFolderResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type CheckFileExistReq struct {
	Version     uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId      []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp   uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	FilePath    string `protobuf:"bytes,4,opt,name=filePath" json:"filePath,omitempty"`
	FileHash    []byte `protobuf:"bytes,5,opt,name=fileHash,proto3" json:"fileHash,omitempty"`
	FileSize    uint64 `protobuf:"varint,6,opt,name=fileSize" json:"fileSize,omitempty"`
	FileName    string `protobuf:"bytes,7,opt,name=fileName" json:"fileName,omitempty"`
	FileModTime uint64 `protobuf:"varint,8,opt,name=fileModTime" json:"fileModTime,omitempty"`
	FileData    []byte `protobuf:"bytes,9,opt,name=fileData,proto3" json:"fileData,omitempty"`
	Interactive bool   `protobuf:"varint,10,opt,name=interactive" json:"interactive,omitempty"`
	NewVersion  bool   `protobuf:"varint,11,opt,name=newVersion" json:"newVersion,omitempty"`
	Sign        []byte `protobuf:"bytes,12,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *CheckFileExistReq) Reset()                    { *m = CheckFileExistReq{} }
func (m *CheckFileExistReq) String() string            { return proto.CompactTextString(m) }
func (*CheckFileExistReq) ProtoMessage()               {}
func (*CheckFileExistReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CheckFileExistReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *CheckFileExistReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *CheckFileExistReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CheckFileExistReq) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *CheckFileExistReq) GetFileHash() []byte {
	if m != nil {
		return m.FileHash
	}
	return nil
}

func (m *CheckFileExistReq) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *CheckFileExistReq) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *CheckFileExistReq) GetFileModTime() uint64 {
	if m != nil {
		return m.FileModTime
	}
	return 0
}

func (m *CheckFileExistReq) GetFileData() []byte {
	if m != nil {
		return m.FileData
	}
	return nil
}

func (m *CheckFileExistReq) GetInteractive() bool {
	if m != nil {
		return m.Interactive
	}
	return false
}

func (m *CheckFileExistReq) GetNewVersion() bool {
	if m != nil {
		return m.NewVersion
	}
	return false
}

func (m *CheckFileExistReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type CheckFileExistResp struct {
	Code             uint32             `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg           string             `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
	StoreType        FileStoreType      `protobuf:"varint,3,opt,name=storeType,enum=metadata.pb.FileStoreType" json:"storeType,omitempty"`
	DataPieceCount   int32              `protobuf:"varint,4,opt,name=dataPieceCount" json:"dataPieceCount,omitempty"`
	VerifyPieceCount int32              `protobuf:"varint,5,opt,name=verifyPieceCount" json:"verifyPieceCount,omitempty"`
	ReplicaCount     int32              `protobuf:"varint,6,opt,name=replicaCount" json:"replicaCount,omitempty"`
	Provider         []*ReplicaProvider `protobuf:"bytes,7,rep,name=provider" json:"provider,omitempty"`
}

func (m *CheckFileExistResp) Reset()                    { *m = CheckFileExistResp{} }
func (m *CheckFileExistResp) String() string            { return proto.CompactTextString(m) }
func (*CheckFileExistResp) ProtoMessage()               {}
func (*CheckFileExistResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CheckFileExistResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *CheckFileExistResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *CheckFileExistResp) GetStoreType() FileStoreType {
	if m != nil {
		return m.StoreType
	}
	return FileStoreType_ErasureCode
}

func (m *CheckFileExistResp) GetDataPieceCount() int32 {
	if m != nil {
		return m.DataPieceCount
	}
	return 0
}

func (m *CheckFileExistResp) GetVerifyPieceCount() int32 {
	if m != nil {
		return m.VerifyPieceCount
	}
	return 0
}

func (m *CheckFileExistResp) GetReplicaCount() int32 {
	if m != nil {
		return m.ReplicaCount
	}
	return 0
}

func (m *CheckFileExistResp) GetProvider() []*ReplicaProvider {
	if m != nil {
		return m.Provider
	}
	return nil
}

type ReplicaProvider struct {
	NodeId    []byte `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Server    string `protobuf:"bytes,2,opt,name=server" json:"server,omitempty"`
	Port      uint32 `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	Timestamp uint64 `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	Ticket    string `protobuf:"bytes,5,opt,name=ticket" json:"ticket,omitempty"`
	Auth      []byte `protobuf:"bytes,6,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (m *ReplicaProvider) Reset()                    { *m = ReplicaProvider{} }
func (m *ReplicaProvider) String() string            { return proto.CompactTextString(m) }
func (*ReplicaProvider) ProtoMessage()               {}
func (*ReplicaProvider) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReplicaProvider) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *ReplicaProvider) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *ReplicaProvider) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ReplicaProvider) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ReplicaProvider) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *ReplicaProvider) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

type UploadFilePrepareReq struct {
	Version   uint32              `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte              `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64              `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	FileHash  []byte              `protobuf:"bytes,4,opt,name=fileHash,proto3" json:"fileHash,omitempty"`
	FileSize  uint64              `protobuf:"varint,5,opt,name=fileSize" json:"fileSize,omitempty"`
	Piece     []*PieceHashAndSize `protobuf:"bytes,6,rep,name=piece" json:"piece,omitempty"`
	Sign      []byte              `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *UploadFilePrepareReq) Reset()                    { *m = UploadFilePrepareReq{} }
func (m *UploadFilePrepareReq) String() string            { return proto.CompactTextString(m) }
func (*UploadFilePrepareReq) ProtoMessage()               {}
func (*UploadFilePrepareReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UploadFilePrepareReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UploadFilePrepareReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *UploadFilePrepareReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UploadFilePrepareReq) GetFileHash() []byte {
	if m != nil {
		return m.FileHash
	}
	return nil
}

func (m *UploadFilePrepareReq) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *UploadFilePrepareReq) GetPiece() []*PieceHashAndSize {
	if m != nil {
		return m.Piece
	}
	return nil
}

func (m *UploadFilePrepareReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type PieceHashAndSize struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Size uint32 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
}

func (m *PieceHashAndSize) Reset()                    { *m = PieceHashAndSize{} }
func (m *PieceHashAndSize) String() string            { return proto.CompactTextString(m) }
func (*PieceHashAndSize) ProtoMessage()               {}
func (*PieceHashAndSize) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PieceHashAndSize) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PieceHashAndSize) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

type UploadFilePrepareResp struct {
	Provider []*ErasureCodeProvider `protobuf:"bytes,1,rep,name=provider" json:"provider,omitempty"`
}

func (m *UploadFilePrepareResp) Reset()                    { *m = UploadFilePrepareResp{} }
func (m *UploadFilePrepareResp) String() string            { return proto.CompactTextString(m) }
func (*UploadFilePrepareResp) ProtoMessage()               {}
func (*UploadFilePrepareResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UploadFilePrepareResp) GetProvider() []*ErasureCodeProvider {
	if m != nil {
		return m.Provider
	}
	return nil
}

type ErasureCodeProvider struct {
	NodeId    []byte           `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Server    string           `protobuf:"bytes,2,opt,name=server" json:"server,omitempty"`
	Port      uint32           `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	Timestamp uint64           `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	HashAuth  []*PieceHashAuth `protobuf:"bytes,5,rep,name=hashAuth" json:"hashAuth,omitempty"`
}

func (m *ErasureCodeProvider) Reset()                    { *m = ErasureCodeProvider{} }
func (m *ErasureCodeProvider) String() string            { return proto.CompactTextString(m) }
func (*ErasureCodeProvider) ProtoMessage()               {}
func (*ErasureCodeProvider) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ErasureCodeProvider) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *ErasureCodeProvider) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *ErasureCodeProvider) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ErasureCodeProvider) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ErasureCodeProvider) GetHashAuth() []*PieceHashAuth {
	if m != nil {
		return m.HashAuth
	}
	return nil
}

type PieceHashAuth struct {
	Hash   []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Ticket string `protobuf:"bytes,2,opt,name=ticket" json:"ticket,omitempty"`
	Auth   []byte `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (m *PieceHashAuth) Reset()                    { *m = PieceHashAuth{} }
func (m *PieceHashAuth) String() string            { return proto.CompactTextString(m) }
func (*PieceHashAuth) ProtoMessage()               {}
func (*PieceHashAuth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PieceHashAuth) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PieceHashAuth) GetTicket() string {
	if m != nil {
		return m.Ticket
	}
	return ""
}

func (m *PieceHashAuth) GetAuth() []byte {
	if m != nil {
		return m.Auth
	}
	return nil
}

type UploadFileDoneReq struct {
	Version     uint32       `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId      []byte       `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp   uint64       `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	FilePath    string       `protobuf:"bytes,4,opt,name=filePath" json:"filePath,omitempty"`
	FileHash    []byte       `protobuf:"bytes,5,opt,name=fileHash,proto3" json:"fileHash,omitempty"`
	FileSize    uint64       `protobuf:"varint,6,opt,name=fileSize" json:"fileSize,omitempty"`
	FileName    string       `protobuf:"bytes,7,opt,name=fileName" json:"fileName,omitempty"`
	FileModTime uint64       `protobuf:"varint,8,opt,name=fileModTime" json:"fileModTime,omitempty"`
	Partition   []*Partition `protobuf:"bytes,9,rep,name=partition" json:"partition,omitempty"`
	Interactive bool         `protobuf:"varint,10,opt,name=interactive" json:"interactive,omitempty"`
	NewVersion  bool         `protobuf:"varint,11,opt,name=newVersion" json:"newVersion,omitempty"`
	Sign        []byte       `protobuf:"bytes,12,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *UploadFileDoneReq) Reset()                    { *m = UploadFileDoneReq{} }
func (m *UploadFileDoneReq) String() string            { return proto.CompactTextString(m) }
func (*UploadFileDoneReq) ProtoMessage()               {}
func (*UploadFileDoneReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UploadFileDoneReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *UploadFileDoneReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *UploadFileDoneReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *UploadFileDoneReq) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *UploadFileDoneReq) GetFileHash() []byte {
	if m != nil {
		return m.FileHash
	}
	return nil
}

func (m *UploadFileDoneReq) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *UploadFileDoneReq) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *UploadFileDoneReq) GetFileModTime() uint64 {
	if m != nil {
		return m.FileModTime
	}
	return 0
}

func (m *UploadFileDoneReq) GetPartition() []*Partition {
	if m != nil {
		return m.Partition
	}
	return nil
}

func (m *UploadFileDoneReq) GetInteractive() bool {
	if m != nil {
		return m.Interactive
	}
	return false
}

func (m *UploadFileDoneReq) GetNewVersion() bool {
	if m != nil {
		return m.NewVersion
	}
	return false
}

func (m *UploadFileDoneReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type Partition struct {
	Block []*Block `protobuf:"bytes,1,rep,name=block" json:"block,omitempty"`
}

func (m *Partition) Reset()                    { *m = Partition{} }
func (m *Partition) String() string            { return proto.CompactTextString(m) }
func (*Partition) ProtoMessage()               {}
func (*Partition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Partition) GetBlock() []*Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type Block struct {
	Hash        []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Size        uint32   `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	BlockSeq    uint32   `protobuf:"varint,3,opt,name=blockSeq" json:"blockSeq,omitempty"`
	Checksum    bool     `protobuf:"varint,4,opt,name=checksum" json:"checksum,omitempty"`
	StoreNodeId [][]byte `protobuf:"bytes,5,rep,name=storeNodeId,proto3" json:"storeNodeId,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Block) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Block) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Block) GetBlockSeq() uint32 {
	if m != nil {
		return m.BlockSeq
	}
	return 0
}

func (m *Block) GetChecksum() bool {
	if m != nil {
		return m.Checksum
	}
	return false
}

func (m *Block) GetStoreNodeId() [][]byte {
	if m != nil {
		return m.StoreNodeId
	}
	return nil
}

type UploadFileDoneResp struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *UploadFileDoneResp) Reset()                    { *m = UploadFileDoneResp{} }
func (m *UploadFileDoneResp) String() string            { return proto.CompactTextString(m) }
func (*UploadFileDoneResp) ProtoMessage()               {}
func (*UploadFileDoneResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UploadFileDoneResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UploadFileDoneResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

type ListFilesReq struct {
	Version   uint32   `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte   `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64   `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Path      string   `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	PageSize  uint32   `protobuf:"varint,5,opt,name=pageSize" json:"pageSize,omitempty"`
	PageNum   uint32   `protobuf:"varint,6,opt,name=pageNum" json:"pageNum,omitempty"`
	SortType  SortType `protobuf:"varint,7,opt,name=sortType,enum=metadata.pb.SortType" json:"sortType,omitempty"`
	AscOrder  bool     `protobuf:"varint,8,opt,name=ascOrder" json:"ascOrder,omitempty"`
	Sign      []byte   `protobuf:"bytes,9,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *ListFilesReq) Reset()                    { *m = ListFilesReq{} }
func (m *ListFilesReq) String() string            { return proto.CompactTextString(m) }
func (*ListFilesReq) ProtoMessage()               {}
func (*ListFilesReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ListFilesReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ListFilesReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *ListFilesReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ListFilesReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ListFilesReq) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListFilesReq) GetPageNum() uint32 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *ListFilesReq) GetSortType() SortType {
	if m != nil {
		return m.SortType
	}
	return SortType_Name
}

func (m *ListFilesReq) GetAscOrder() bool {
	if m != nil {
		return m.AscOrder
	}
	return false
}

func (m *ListFilesReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type ListFilesResp struct {
	Code        uint32          `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg      string          `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
	TotalRecord uint32          `protobuf:"varint,3,opt,name=totalRecord" json:"totalRecord,omitempty"`
	Fof         []*FileOrFolder `protobuf:"bytes,4,rep,name=fof" json:"fof,omitempty"`
}

func (m *ListFilesResp) Reset()                    { *m = ListFilesResp{} }
func (m *ListFilesResp) String() string            { return proto.CompactTextString(m) }
func (*ListFilesResp) ProtoMessage()               {}
func (*ListFilesResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ListFilesResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ListFilesResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *ListFilesResp) GetTotalRecord() uint32 {
	if m != nil {
		return m.TotalRecord
	}
	return 0
}

func (m *ListFilesResp) GetFof() []*FileOrFolder {
	if m != nil {
		return m.Fof
	}
	return nil
}

type FileOrFolder struct {
	Folder   bool   `protobuf:"varint,1,opt,name=folder" json:"folder,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	ModTime  uint64 `protobuf:"varint,3,opt,name=modTime" json:"modTime,omitempty"`
	FileHash []byte `protobuf:"bytes,4,opt,name=fileHash,proto3" json:"fileHash,omitempty"`
	FileSize uint64 `protobuf:"varint,5,opt,name=fileSize" json:"fileSize,omitempty"`
}

func (m *FileOrFolder) Reset()                    { *m = FileOrFolder{} }
func (m *FileOrFolder) String() string            { return proto.CompactTextString(m) }
func (*FileOrFolder) ProtoMessage()               {}
func (*FileOrFolder) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FileOrFolder) GetFolder() bool {
	if m != nil {
		return m.Folder
	}
	return false
}

func (m *FileOrFolder) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileOrFolder) GetModTime() uint64 {
	if m != nil {
		return m.ModTime
	}
	return 0
}

func (m *FileOrFolder) GetFileHash() []byte {
	if m != nil {
		return m.FileHash
	}
	return nil
}

func (m *FileOrFolder) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

type RetrieveFileReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	FileHash  []byte `protobuf:"bytes,4,opt,name=fileHash,proto3" json:"fileHash,omitempty"`
	FileSize  uint64 `protobuf:"varint,5,opt,name=fileSize" json:"fileSize,omitempty"`
	Sign      []byte `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *RetrieveFileReq) Reset()                    { *m = RetrieveFileReq{} }
func (m *RetrieveFileReq) String() string            { return proto.CompactTextString(m) }
func (*RetrieveFileReq) ProtoMessage()               {}
func (*RetrieveFileReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *RetrieveFileReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RetrieveFileReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *RetrieveFileReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RetrieveFileReq) GetFileHash() []byte {
	if m != nil {
		return m.FileHash
	}
	return nil
}

func (m *RetrieveFileReq) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *RetrieveFileReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type RetrieveFileResp struct {
	Code      uint32       `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg    string       `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
	FileData  []byte       `protobuf:"bytes,3,opt,name=fileData,proto3" json:"fileData,omitempty"`
	Partition []*Partition `protobuf:"bytes,4,rep,name=partition" json:"partition,omitempty"`
}

func (m *RetrieveFileResp) Reset()                    { *m = RetrieveFileResp{} }
func (m *RetrieveFileResp) String() string            { return proto.CompactTextString(m) }
func (*RetrieveFileResp) ProtoMessage()               {}
func (*RetrieveFileResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *RetrieveFileResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RetrieveFileResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *RetrieveFileResp) GetFileData() []byte {
	if m != nil {
		return m.FileData
	}
	return nil
}

func (m *RetrieveFileResp) GetPartition() []*Partition {
	if m != nil {
		return m.Partition
	}
	return nil
}

type RemoveReq struct {
	Version   uint32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	NodeId    []byte `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Timestamp uint64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Path      string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	Recursive bool   `protobuf:"varint,5,opt,name=recursive" json:"recursive,omitempty"`
	Sign      []byte `protobuf:"bytes,6,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (m *RemoveReq) Reset()                    { *m = RemoveReq{} }
func (m *RemoveReq) String() string            { return proto.CompactTextString(m) }
func (*RemoveReq) ProtoMessage()               {}
func (*RemoveReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *RemoveReq) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RemoveReq) GetNodeId() []byte {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *RemoveReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *RemoveReq) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *RemoveReq) GetRecursive() bool {
	if m != nil {
		return m.Recursive
	}
	return false
}

func (m *RemoveReq) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type RemoveResp struct {
	Code   uint32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	ErrMsg string `protobuf:"bytes,2,opt,name=errMsg" json:"errMsg,omitempty"`
}

func (m *RemoveResp) Reset()                    { *m = RemoveResp{} }
func (m *RemoveResp) String() string            { return proto.CompactTextString(m) }
func (*RemoveResp) ProtoMessage()               {}
func (*RemoveResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *RemoveResp) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *RemoveResp) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*MkFolderReq)(nil), "metadata.pb.MkFolderReq")
	proto.RegisterType((*MkFolderResp)(nil), "metadata.pb.MkFolderResp")
	proto.RegisterType((*CheckFileExistReq)(nil), "metadata.pb.CheckFileExistReq")
	proto.RegisterType((*CheckFileExistResp)(nil), "metadata.pb.CheckFileExistResp")
	proto.RegisterType((*ReplicaProvider)(nil), "metadata.pb.ReplicaProvider")
	proto.RegisterType((*UploadFilePrepareReq)(nil), "metadata.pb.UploadFilePrepareReq")
	proto.RegisterType((*PieceHashAndSize)(nil), "metadata.pb.PieceHashAndSize")
	proto.RegisterType((*UploadFilePrepareResp)(nil), "metadata.pb.UploadFilePrepareResp")
	proto.RegisterType((*ErasureCodeProvider)(nil), "metadata.pb.ErasureCodeProvider")
	proto.RegisterType((*PieceHashAuth)(nil), "metadata.pb.PieceHashAuth")
	proto.RegisterType((*UploadFileDoneReq)(nil), "metadata.pb.UploadFileDoneReq")
	proto.RegisterType((*Partition)(nil), "metadata.pb.Partition")
	proto.RegisterType((*Block)(nil), "metadata.pb.Block")
	proto.RegisterType((*UploadFileDoneResp)(nil), "metadata.pb.UploadFileDoneResp")
	proto.RegisterType((*ListFilesReq)(nil), "metadata.pb.ListFilesReq")
	proto.RegisterType((*ListFilesResp)(nil), "metadata.pb.ListFilesResp")
	proto.RegisterType((*FileOrFolder)(nil), "metadata.pb.FileOrFolder")
	proto.RegisterType((*RetrieveFileReq)(nil), "metadata.pb.RetrieveFileReq")
	proto.RegisterType((*RetrieveFileResp)(nil), "metadata.pb.RetrieveFileResp")
	proto.RegisterType((*RemoveReq)(nil), "metadata.pb.RemoveReq")
	proto.RegisterType((*RemoveResp)(nil), "metadata.pb.RemoveResp")
	proto.RegisterEnum("metadata.pb.FileStoreType", FileStoreType_name, FileStoreType_value)
	proto.RegisterEnum("metadata.pb.SortType", SortType_name, SortType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MatadataService service

type MatadataServiceClient interface {
	MkFolder(ctx context.Context, in *MkFolderReq, opts ...grpc.CallOption) (*MkFolderResp, error)
	CheckFileExist(ctx context.Context, in *CheckFileExistReq, opts ...grpc.CallOption) (*CheckFileExistResp, error)
	UploadFilePrepare(ctx context.Context, in *UploadFilePrepareReq, opts ...grpc.CallOption) (*UploadFilePrepareResp, error)
	UploadFileDone(ctx context.Context, in *UploadFileDoneReq, opts ...grpc.CallOption) (*UploadFileDoneResp, error)
	ListFiles(ctx context.Context, in *ListFilesReq, opts ...grpc.CallOption) (*ListFilesResp, error)
	RetrieveFile(ctx context.Context, in *RetrieveFileReq, opts ...grpc.CallOption) (*RetrieveFileResp, error)
	Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*RemoveResp, error)
}

type matadataServiceClient struct {
	cc *grpc.ClientConn
}

func NewMatadataServiceClient(cc *grpc.ClientConn) MatadataServiceClient {
	return &matadataServiceClient{cc}
}

func (c *matadataServiceClient) MkFolder(ctx context.Context, in *MkFolderReq, opts ...grpc.CallOption) (*MkFolderResp, error) {
	out := new(MkFolderResp)
	err := grpc.Invoke(ctx, "/metadata.pb.MatadataService/MkFolder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matadataServiceClient) CheckFileExist(ctx context.Context, in *CheckFileExistReq, opts ...grpc.CallOption) (*CheckFileExistResp, error) {
	out := new(CheckFileExistResp)
	err := grpc.Invoke(ctx, "/metadata.pb.MatadataService/CheckFileExist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matadataServiceClient) UploadFilePrepare(ctx context.Context, in *UploadFilePrepareReq, opts ...grpc.CallOption) (*UploadFilePrepareResp, error) {
	out := new(UploadFilePrepareResp)
	err := grpc.Invoke(ctx, "/metadata.pb.MatadataService/UploadFilePrepare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matadataServiceClient) UploadFileDone(ctx context.Context, in *UploadFileDoneReq, opts ...grpc.CallOption) (*UploadFileDoneResp, error) {
	out := new(UploadFileDoneResp)
	err := grpc.Invoke(ctx, "/metadata.pb.MatadataService/UploadFileDone", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matadataServiceClient) ListFiles(ctx context.Context, in *ListFilesReq, opts ...grpc.CallOption) (*ListFilesResp, error) {
	out := new(ListFilesResp)
	err := grpc.Invoke(ctx, "/metadata.pb.MatadataService/ListFiles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matadataServiceClient) RetrieveFile(ctx context.Context, in *RetrieveFileReq, opts ...grpc.CallOption) (*RetrieveFileResp, error) {
	out := new(RetrieveFileResp)
	err := grpc.Invoke(ctx, "/metadata.pb.MatadataService/RetrieveFile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matadataServiceClient) Remove(ctx context.Context, in *RemoveReq, opts ...grpc.CallOption) (*RemoveResp, error) {
	out := new(RemoveResp)
	err := grpc.Invoke(ctx, "/metadata.pb.MatadataService/Remove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MatadataService service

type MatadataServiceServer interface {
	MkFolder(context.Context, *MkFolderReq) (*MkFolderResp, error)
	CheckFileExist(context.Context, *CheckFileExistReq) (*CheckFileExistResp, error)
	UploadFilePrepare(context.Context, *UploadFilePrepareReq) (*UploadFilePrepareResp, error)
	UploadFileDone(context.Context, *UploadFileDoneReq) (*UploadFileDoneResp, error)
	ListFiles(context.Context, *ListFilesReq) (*ListFilesResp, error)
	RetrieveFile(context.Context, *RetrieveFileReq) (*RetrieveFileResp, error)
	Remove(context.Context, *RemoveReq) (*RemoveResp, error)
}

func RegisterMatadataServiceServer(s *grpc.Server, srv MatadataServiceServer) {
	s.RegisterService(&_MatadataService_serviceDesc, srv)
}

func _MatadataService_MkFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatadataServiceServer).MkFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pb.MatadataService/MkFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatadataServiceServer).MkFolder(ctx, req.(*MkFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatadataService_CheckFileExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFileExistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatadataServiceServer).CheckFileExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pb.MatadataService/CheckFileExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatadataServiceServer).CheckFileExist(ctx, req.(*CheckFileExistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatadataService_UploadFilePrepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFilePrepareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatadataServiceServer).UploadFilePrepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pb.MatadataService/UploadFilePrepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatadataServiceServer).UploadFilePrepare(ctx, req.(*UploadFilePrepareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatadataService_UploadFileDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileDoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatadataServiceServer).UploadFileDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pb.MatadataService/UploadFileDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatadataServiceServer).UploadFileDone(ctx, req.(*UploadFileDoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatadataService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatadataServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pb.MatadataService/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatadataServiceServer).ListFiles(ctx, req.(*ListFilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatadataService_RetrieveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatadataServiceServer).RetrieveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pb.MatadataService/RetrieveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatadataServiceServer).RetrieveFile(ctx, req.(*RetrieveFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatadataService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatadataServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metadata.pb.MatadataService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatadataServiceServer).Remove(ctx, req.(*RemoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MatadataService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metadata.pb.MatadataService",
	HandlerType: (*MatadataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MkFolder",
			Handler:    _MatadataService_MkFolder_Handler,
		},
		{
			MethodName: "CheckFileExist",
			Handler:    _MatadataService_CheckFileExist_Handler,
		},
		{
			MethodName: "UploadFilePrepare",
			Handler:    _MatadataService_UploadFilePrepare_Handler,
		},
		{
			MethodName: "UploadFileDone",
			Handler:    _MatadataService_UploadFileDone_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _MatadataService_ListFiles_Handler,
		},
		{
			MethodName: "RetrieveFile",
			Handler:    _MatadataService_RetrieveFile_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _MatadataService_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadata.proto",
}

func init() { proto.RegisterFile("metadata.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0x4b, 0x6f, 0x23, 0x45,
	0x10, 0xce, 0xf8, 0x39, 0x53, 0xb6, 0x13, 0x6f, 0xc3, 0x86, 0xd9, 0x51, 0x76, 0x31, 0x73, 0x40,
	0x56, 0x56, 0x8a, 0x44, 0x16, 0x50, 0x04, 0x1c, 0x08, 0xc9, 0xae, 0x40, 0xc2, 0x49, 0xd4, 0xde,
	0xe5, 0xc4, 0x65, 0x32, 0xee, 0xc4, 0xa3, 0xd8, 0x9e, 0xd9, 0x9e, 0xb6, 0x61, 0xf7, 0xc6, 0x91,
	0xc7, 0x81, 0x3f, 0x80, 0x10, 0x77, 0x1e, 0x3f, 0x6b, 0xff, 0x06, 0xea, 0x9a, 0x57, 0xf7, 0xc4,
	0x09, 0x6b, 0xa4, 0x44, 0x48, 0xdc, 0xba, 0xaa, 0xbf, 0xae, 0xa9, 0xae, 0xfa, 0xaa, 0xab, 0x6c,
	0x58, 0x9f, 0x32, 0xe1, 0x8d, 0x3c, 0xe1, 0xed, 0x44, 0x3c, 0x14, 0x21, 0x69, 0x15, 0xf2, 0xa9,
	0xfb, 0x8b, 0x01, 0xad, 0xc1, 0xc5, 0x93, 0x70, 0x32, 0x62, 0x9c, 0xb2, 0xe7, 0xc4, 0x86, 0xe6,
	0x82, 0xf1, 0x38, 0x08, 0x67, 0xb6, 0xd1, 0x33, 0xfa, 0x1d, 0x9a, 0x89, 0x64, 0x13, 0x1a, 0xb3,
	0x70, 0xc4, 0xbe, 0x18, 0xd9, 0x95, 0x9e, 0xd1, 0x6f, 0xd3, 0x54, 0x22, 0x5b, 0x60, 0x89, 0x60,
	0xca, 0x62, 0xe1, 0x4d, 0x23, 0xbb, 0xda, 0x33, 0xfa, 0x35, 0x5a, 0x28, 0x08, 0x81, 0x5a, 0xe4,
	0x89, 0xb1, 0x5d, 0xeb, 0x19, 0x7d, 0x8b, 0xe2, 0x5a, 0x5a, 0x3a, 0xc3, 0x0f, 0xda, 0xf5, 0x5e,
	0xb5, 0x6f, 0xd1, 0x54, 0x92, 0xd8, 0x38, 0x38, 0x9f, 0xd9, 0x0d, 0xb4, 0x8f, 0x6b, 0xf7, 0x23,
	0x68, 0x17, 0xee, 0xc5, 0x68, 0xcf, 0x0f, 0x47, 0x2c, 0x75, 0x0e, 0xd7, 0xd2, 0x1e, 0xe3, 0x7c,
	0x10, 0x9f, 0xa3, 0x67, 0x16, 0x4d, 0x25, 0xf7, 0x55, 0x05, 0xee, 0x1c, 0x8c, 0x99, 0x7f, 0xf1,
	0x24, 0x98, 0xb0, 0xc7, 0xdf, 0x06, 0xb1, 0xb8, 0x89, 0x1b, 0x3a, 0x60, 0x9e, 0x05, 0x13, 0x76,
	0x52, 0xdc, 0x32, 0x97, 0xb3, 0xbd, 0xcf, 0xbd, 0x78, 0x6c, 0xd7, 0xd1, 0x66, 0x2e, 0x67, 0x7b,
	0xc3, 0xe0, 0x25, 0xc3, 0x1b, 0xd7, 0x68, 0x2e, 0x67, 0x7b, 0x47, 0xde, 0x94, 0xd9, 0xcd, 0xc2,
	0xa6, 0x94, 0x49, 0x0f, 0x5a, 0x72, 0x3d, 0x08, 0x47, 0x4f, 0x83, 0x29, 0xb3, 0x4d, 0x3c, 0xaa,
	0xaa, 0xb2, 0xd3, 0x87, 0x9e, 0xf0, 0x6c, 0xab, 0xf8, 0xaa, 0x94, 0xe5, 0xe9, 0x60, 0x26, 0x18,
	0xf7, 0x7c, 0x11, 0x2c, 0x98, 0x0d, 0x3d, 0xa3, 0x6f, 0x52, 0x55, 0x45, 0x1e, 0x00, 0xcc, 0xd8,
	0x37, 0x5f, 0xa5, 0x21, 0x6a, 0x21, 0x40, 0xd1, 0xe4, 0x59, 0x6a, 0x2b, 0x59, 0xfa, 0xbd, 0x02,
	0xa4, 0x1c, 0xe9, 0xd5, 0x92, 0x45, 0xf6, 0xc0, 0x8a, 0x45, 0xc8, 0xd9, 0xd3, 0x17, 0x11, 0xc3,
	0x20, 0xaf, 0xef, 0x3a, 0x3b, 0x0a, 0x53, 0x77, 0xa4, 0xe9, 0x61, 0x86, 0xa0, 0x05, 0x98, 0xbc,
	0x0b, 0xeb, 0x12, 0x73, 0x12, 0x30, 0x9f, 0x1d, 0x84, 0xf3, 0x99, 0xc0, 0x34, 0xd4, 0x69, 0x49,
	0x4b, 0xb6, 0xa1, 0xbb, 0x60, 0x3c, 0x38, 0x7b, 0xa1, 0x20, 0xeb, 0x88, 0xbc, 0xa4, 0x27, 0x2e,
	0xb4, 0x39, 0x8b, 0x26, 0x81, 0xef, 0x25, 0xb8, 0x06, 0xe2, 0x34, 0x1d, 0xd9, 0x03, 0x33, 0xe2,
	0xe1, 0x22, 0x90, 0x44, 0x6e, 0xf6, 0xaa, 0xfd, 0xd6, 0xee, 0x96, 0xe6, 0x30, 0x4d, 0xc0, 0x27,
	0x29, 0x86, 0xe6, 0x68, 0xf7, 0x57, 0x03, 0x36, 0x4a, 0xbb, 0x0a, 0xf9, 0x0c, 0x8d, 0x7c, 0x9b,
	0xd0, 0x88, 0x19, 0x5f, 0x30, 0x9e, 0xc5, 0x2b, 0x91, 0xb0, 0xb0, 0x42, 0x2e, 0x30, 0x54, 0x1d,
	0x8a, 0x6b, 0x9d, 0xa8, 0xb5, 0x32, 0x51, 0x37, 0xa1, 0x21, 0x02, 0xff, 0x82, 0x25, 0xb7, 0xb6,
	0x68, 0x2a, 0x49, 0x4b, 0xde, 0x5c, 0x8c, 0xb3, 0xb2, 0x93, 0x6b, 0xf7, 0x95, 0x01, 0x6f, 0x3e,
	0x8b, 0x26, 0xa1, 0x37, 0x92, 0x61, 0x3f, 0xe1, 0x2c, 0xf2, 0x38, 0xbb, 0xc1, 0xea, 0xc1, 0x0a,
	0xa9, 0x5d, 0x53, 0x21, 0xf5, 0x52, 0x85, 0x3c, 0x82, 0x7a, 0x24, 0xd3, 0x65, 0x37, 0x30, 0xf2,
	0xf7, 0xb5, 0xc8, 0x63, 0x22, 0xa5, 0x89, 0xfd, 0xd9, 0x48, 0xa2, 0x69, 0x82, 0xcd, 0xa9, 0xdb,
	0xd4, 0x1e, 0x98, 0x6e, 0x19, 0x2e, 0x71, 0x63, 0xe9, 0x50, 0x92, 0x09, 0x5c, 0x27, 0x67, 0x5f,
	0x32, 0xbc, 0x5c, 0x87, 0xe2, 0xda, 0x7d, 0x06, 0x77, 0x97, 0x04, 0x29, 0x8e, 0xc8, 0x27, 0x0a,
	0x35, 0x0c, 0x74, 0xb0, 0xa7, 0x39, 0xf8, 0x98, 0x7b, 0xf1, 0x9c, 0xb3, 0x83, 0x70, 0xc4, 0x96,
	0xd0, 0xe3, 0x2f, 0x03, 0xde, 0x58, 0x82, 0xb8, 0x05, 0x8a, 0x7c, 0x08, 0xa6, 0xbc, 0xec, 0xbe,
	0xa4, 0x43, 0x1d, 0xfd, 0x76, 0xae, 0x08, 0xec, 0x5c, 0x8c, 0x69, 0x8e, 0x75, 0x8f, 0xa1, 0xa3,
	0x6d, 0x2d, 0x8d, 0x60, 0xc1, 0xbf, 0xca, 0x52, 0xfe, 0x55, 0x15, 0xfe, 0x7d, 0x57, 0x85, 0x3b,
	0x45, 0x68, 0x0f, 0xc3, 0x19, 0xfb, 0x7f, 0x3c, 0xdd, 0xef, 0x83, 0x15, 0x79, 0x5c, 0x04, 0x42,
	0xde, 0xd1, 0xc2, 0x0c, 0x6c, 0xea, 0x19, 0xc8, 0x76, 0x69, 0x01, 0xbc, 0xa1, 0x47, 0xfd, 0x03,
	0xb0, 0xf2, 0xaf, 0x91, 0x3e, 0xd4, 0x4f, 0x27, 0xa1, 0x7f, 0x91, 0xd2, 0x99, 0x68, 0x4e, 0x7d,
	0x26, 0x77, 0x68, 0x02, 0x70, 0xbf, 0x37, 0xa0, 0x8e, 0x8a, 0xd7, 0x2d, 0x23, 0x19, 0x32, 0x3c,
	0x3a, 0x64, 0xcf, 0x53, 0xae, 0xe6, 0xb2, 0xdc, 0xf3, 0x65, 0x63, 0x89, 0xe7, 0x53, 0x4c, 0x91,
	0x49, 0x73, 0x59, 0x5e, 0x1b, 0xbb, 0xc0, 0x51, 0x92, 0x79, 0x49, 0xd8, 0x36, 0x55, 0x55, 0xee,
	0xa7, 0x40, 0xca, 0x2c, 0x5a, 0x71, 0x86, 0xf8, 0xb1, 0x02, 0xed, 0x2f, 0x83, 0x58, 0x48, 0x03,
	0xf1, 0x6d, 0x0d, 0x48, 0x0e, 0x98, 0x91, 0x77, 0x5e, 0x3c, 0x7c, 0x1d, 0x9a, 0xcb, 0xf2, 0xfb,
	0x72, 0x7d, 0x34, 0x9f, 0x22, 0xf5, 0x3a, 0x34, 0x13, 0xc9, 0x7b, 0x60, 0xc6, 0x21, 0x17, 0xd8,
	0x40, 0x9b, 0xd8, 0x40, 0xef, 0x6a, 0x59, 0x1a, 0xa6, 0x9b, 0x34, 0x87, 0xc9, 0x0f, 0x79, 0xb1,
	0x7f, 0xcc, 0xe5, 0x3b, 0x65, 0x26, 0xd1, 0xcd, 0xe4, 0x9c, 0x12, 0x96, 0x42, 0x89, 0x1f, 0x0c,
	0xe8, 0x28, 0xd1, 0x58, 0xb1, 0xc5, 0xf7, 0xa0, 0x25, 0x42, 0xe1, 0x4d, 0x28, 0xf3, 0x43, 0x3e,
	0x4a, 0x53, 0xad, 0xaa, 0xc8, 0x43, 0xa8, 0x9e, 0x85, 0x67, 0x76, 0x0d, 0x39, 0x76, 0xef, 0x52,
	0xfb, 0x3f, 0xe6, 0xe9, 0x24, 0x28, 0x51, 0xee, 0x4f, 0x06, 0xb4, 0x55, 0xad, 0x32, 0x57, 0x1a,
	0x78, 0x17, 0x65, 0xae, 0x9c, 0xc9, 0x72, 0x4c, 0xbc, 0xc1, 0xb5, 0x0c, 0xe3, 0x34, 0x2d, 0xc3,
	0x24, 0x25, 0x99, 0xf8, 0x6f, 0x3b, 0x92, 0xfb, 0x07, 0x36, 0x75, 0xc1, 0x03, 0xb6, 0x60, 0xd2,
	0xad, 0xff, 0x52, 0xb7, 0x5c, 0x36, 0x59, 0xff, 0x6c, 0x40, 0x57, 0xf7, 0x77, 0xc5, 0x74, 0xaa,
	0x63, 0x66, 0xb5, 0x34, 0x66, 0x6a, 0xef, 0x58, 0xed, 0x35, 0xdf, 0x31, 0xf7, 0x37, 0x03, 0x2c,
	0xca, 0xa6, 0xe1, 0x82, 0xdd, 0x56, 0xa5, 0x6d, 0x81, 0xc5, 0x99, 0x3f, 0xe7, 0xb1, 0x7c, 0x37,
	0xeb, 0xc8, 0x9a, 0x42, 0xb1, 0x34, 0x6c, 0x7b, 0x00, 0x99, 0x8b, 0xab, 0xc5, 0x6b, 0x7b, 0x17,
	0x3a, 0xda, 0x0c, 0x4b, 0x36, 0xa0, 0xa5, 0xb4, 0xf9, 0xee, 0x1a, 0xe9, 0x42, 0x7b, 0x30, 0x9f,
	0x88, 0x20, 0x9d, 0x0d, 0xbb, 0xc6, 0xf6, 0x43, 0x30, 0xb3, 0xb2, 0x25, 0x26, 0xd4, 0x64, 0x17,
	0xe9, 0xae, 0x91, 0x16, 0x34, 0xd3, 0x86, 0xd1, 0x35, 0xa4, 0x5a, 0xe6, 0xb8, 0x5b, 0xd9, 0xfd,
	0xb3, 0x06, 0x1b, 0x03, 0x2f, 0x89, 0xf1, 0x90, 0xf1, 0x45, 0xe0, 0x33, 0xb2, 0x0f, 0x66, 0xf6,
	0xfb, 0x89, 0xd8, 0x5a, 0x06, 0x94, 0x5f, 0x7d, 0xce, 0xbd, 0x2b, 0x76, 0xe2, 0xc8, 0x5d, 0x23,
	0x43, 0x58, 0xd7, 0x67, 0x7b, 0xf2, 0x40, 0x83, 0x5f, 0xfa, 0x89, 0xe5, 0xbc, 0x7d, 0xed, 0x3e,
	0x1a, 0xfd, 0x5a, 0xed, 0xef, 0xe9, 0xe8, 0x44, 0xde, 0xd1, 0xce, 0x2d, 0x9b, 0x3f, 0x1d, 0xf7,
	0x9f, 0x20, 0x99, 0xcb, 0xfa, 0xbb, 0x5f, 0x72, 0xf9, 0xd2, 0x68, 0x51, 0x72, 0xf9, 0x72, 0xd3,
	0x70, 0xd7, 0xc8, 0x21, 0x58, 0xf9, 0xdb, 0x47, 0xf4, 0x88, 0xa9, 0x1d, 0xc2, 0x71, 0xae, 0xda,
	0x42, 0x2b, 0x03, 0x68, 0xab, 0x55, 0x47, 0xca, 0xbf, 0x19, 0xb4, 0x07, 0xc4, 0xb9, 0x7f, 0xcd,
	0x2e, 0x9a, 0xfb, 0x18, 0x1a, 0x09, 0x1d, 0xc9, 0x66, 0x09, 0x9a, 0x96, 0x91, 0xf3, 0xd6, 0x52,
	0xbd, 0x3c, 0x7c, 0xda, 0xc0, 0x3f, 0x04, 0x1e, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xf3,
	0x24, 0x71, 0x22, 0x10, 0x00, 0x00,
}
